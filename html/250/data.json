{"title":"设计模式之美","author":"王争","cover":"https://static001.geekbang.org/resource/image/aa/4e/aa1005366bab254e69de8391e172394e.jpg","cid":250,"list":[{"id":160463,"title":"开篇词 | 一对一的设计与编码集训，让你告别没有成长的烂代码！","chapter":"1031"},{"id":160981,"title":"01 | 为什么说每个程序员都要尽早地学习并掌握设计模式相关知识？","chapter":"1032"},{"id":160985,"title":"02 | 从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？","chapter":"1032"},{"id":160991,"title":"03 | 面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？","chapter":"1032"},{"id":161575,"title":"04 | 理论一：当谈论面向对象的时候，我们到底在谈论什么？","chapter":"1037"},{"id":161114,"title":"05 | 理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？","chapter":"1037"},{"id":161587,"title":"06 | 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？","chapter":"1037"},{"id":164907,"title":"07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？","chapter":"1037"},{"id":165103,"title":"08 | 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？","chapter":"1037"},{"id":165114,"title":"09 | 理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？","chapter":"1037"},{"id":169593,"title":"10 | 理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？","chapter":"1037"},{"id":169600,"title":"11 | 实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？","chapter":"1037"},{"id":169631,"title":"12 | 实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？","chapter":"1037"},{"id":171760,"title":"13 | 实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？","chapter":"1037"},{"id":171767,"title":"14 | 实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？","chapter":"1037"},{"id":171771,"title":"15 | 理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？","chapter":"1097"},{"id":176075,"title":"16 | 理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？","chapter":"1097"},{"id":177110,"title":"17 | 理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？","chapter":"1097"},{"id":177442,"title":"18 | 理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？","chapter":"1097"},{"id":177444,"title":"19 | 理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？","chapter":"1097"},{"id":177448,"title":"20 | 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？","chapter":"1097"},{"id":179607,"title":"21 | 理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？","chapter":"1097"},{"id":179615,"title":"22 | 理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？","chapter":"1097"},{"id":182001,"title":"23 | 实战一（上）：针对业务系统的开发，如何做需求分析和设计？","chapter":"1097"},{"id":183007,"title":"24 | 实战一（下）：如何实现一个遵从设计原则的积分兑换系统？","chapter":"1097"},{"id":179644,"title":"25 | 实战二（上）：针对非业务的通用框架开发，如何做需求分析和设计？","chapter":"1097"},{"id":179673,"title":"26 | 实战二（下）：如何实现一个支持各种统计规则的性能计数器？","chapter":"1097"},{"id":179679,"title":"27 | 理论一：什么情况下要重构？到底重构什么？又该如何重构？","chapter":"1202"},{"id":185684,"title":"28 | 理论二：为了保证重构不出错，有哪些非常能落地的技术手段？","chapter":"1202"},{"id":186691,"title":"29 | 理论三：什么是代码的可测试性？如何写出可测试性好的代码？","chapter":"1202"},{"id":187761,"title":"30 | 理论四：如何通过封装、抽象、模块化、中间层等解耦代码？","chapter":"1202"},{"id":188622,"title":"31 | 理论五：让你最快速地改善代码质量的20条编程规范（上）","chapter":"1202"},{"id":188857,"title":"32 | 理论五：让你最快速地改善代码质量的20条编程规范（中）","chapter":"1202"},{"id":188882,"title":"33 | 理论五：让你最快速地改善代码质量的20条编程规范（下）","chapter":"1202"},{"id":190979,"title":"34 | 实战一（上）：通过一段ID生成器代码，学习如何发现代码质量问题","chapter":"1202"},{"id":191621,"title":"35 | 实战一（下）：手把手带你将ID生成器代码从“能用”重构为“好用”","chapter":"1202"},{"id":191642,"title":"36 | 实战二（上）：程序出错该返回啥？NULL、异常、错误码、空对象？","chapter":"1202"},{"id":191647,"title":"37 | 实战二（下）：重构ID生成器项目中各函数的异常处理代码","chapter":"1202"},{"id":193093,"title":"38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点","chapter":"1239"},{"id":193221,"title":"39 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（上）","chapter":"1239"},{"id":193555,"title":"40 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（下）","chapter":"1239"},{"id":194035,"title":"41 | 单例模式（上）：为什么说支持懒加载的双重检测不比饿汉式更优？","chapter":"1246"},{"id":194068,"title":"42 | 单例模式（中）：我为什么不推荐使用单例模式？又有何替代方案？","chapter":"1246"},{"id":196790,"title":"43 | 单例模式（下）：如何设计实现一个集群环境下的分布式单例模式？","chapter":"1246"},{"id":197254,"title":"44 | 工厂模式（上）：我为什么说没事不要随便用工厂模式创建对象？","chapter":"1246"},{"id":198614,"title":"45 | 工厂模式（下）：如何设计实现一个Dependency Injection框架？","chapter":"1246"},{"id":199674,"title":"46 | 建造者模式：详解构造函数、set方法、建造者模式三种对象创建方式","chapter":"1246"},{"id":200786,"title":"47 | 原型模式：如何最快速地clone一个HashMap散列表？","chapter":"1246"},{"id":201823,"title":"48 | 代理模式：代理在RPC、缓存、监控等场景中的应用","chapter":"1271"},{"id":202786,"title":"49 | 桥接模式：如何实现支持不同类型和渠道的消息推送系统？","chapter":"1271"},{"id":204845,"title":"50 | 装饰器模式：通过剖析Java IO类库源码学习装饰器模式","chapter":"1271"},{"id":205912,"title":"51 | 适配器模式：代理、适配器、桥接、装饰，这四个模式有何区别？","chapter":"1271"},{"id":206409,"title":"52 | 门面模式：如何设计合理的接口粒度以兼顾接口的易用性和通用性？","chapter":"1271"},{"id":207456,"title":"53 | 组合模式：如何设计实现支持递归遍历的文件系统目录树结构？","chapter":"1271"},{"id":208572,"title":"54 | 享元模式（上）：如何利用享元模式优化文本编辑器的内存占用？","chapter":"1271"},{"id":209343,"title":"55 | 享元模式（下）：剖析享元模式在Java Integer、String中的应用","chapter":"1271"},{"id":210170,"title":"56 | 观察者模式（上）：详解各种应用场景下观察者模式的不同实现方式","chapter":"1289"},{"id":211239,"title":"57 | 观察者模式（下）：如何实现一个异步非阻塞的EventBus框架？","chapter":"1289"},{"id":212049,"title":"58 | 模板模式（上）：剖析模板模式在JDK、Servlet、JUnit等中的应用","chapter":"1289"},{"id":212802,"title":"59 | 模板模式（下）：模板模式与Callback回调函数有何区别和联系？","chapter":"1289"},{"id":214014,"title":"60 | 策略模式（上）：如何避免冗长的if-else/switch分支判断代码？","chapter":"1289"},{"id":215132,"title":"61 | 策略模式（下）：如何实现一个支持给不同大小文件排序的小程序？","chapter":"1289"},{"id":216278,"title":"62 | 职责链模式（上）：如何实现可灵活扩展算法的敏感信息过滤框架？","chapter":"1289"},{"id":217395,"title":"63 | 职责链模式（下）：框架中常用的过滤器、拦截器是如何实现的？","chapter":"1289"},{"id":218375,"title":"64 | 状态模式：游戏、工作流引擎中常用的状态机是如何实现的？","chapter":"1289"},{"id":219290,"title":"65 | 迭代器模式（上）：相比直接遍历集合数据，使用迭代器有哪些优势？","chapter":"1289"},{"id":219964,"title":"66 | 迭代器模式（中）：遍历集合的同时，为什么不能增删集合元素？","chapter":"1289"},{"id":221269,"title":"67 | 迭代器模式（下）：如何设计实现一个支持“快照”功能的iterator？","chapter":"1289"},{"id":221852,"title":"68 | 访问者模式（上）：手把手带你还原访问者模式诞生的思维过程","chapter":"1289"},{"id":222762,"title":"69 | 访问者模式（下）：为什么支持双分派的语言不需要访问者模式？","chapter":"1289"},{"id":223947,"title":"70 | 备忘录模式：对于大对象的备份和恢复，如何优化内存和时间的消耗？","chapter":"1289"},{"id":224549,"title":"71 | 命令模式：如何利用命令模式实现一个手游后端架构？","chapter":"1289"},{"id":225904,"title":"72 | 解释器模式：如何设计实现一个自定义接口告警规则功能？","chapter":"1289"},{"id":226710,"title":"73 | 中介模式：什么时候用中介模式？什么时候用观察者模式？","chapter":"1289"},{"id":227452,"title":"74 | 总结回顾23种经典设计模式的原理、背后的思想、应用场景等","chapter":"1356"},{"id":229157,"title":"75 | 在实际的项目开发中，如何避免过度设计？又如何避免设计不足？","chapter":"1356"},{"id":229996,"title":"76 |  开源实战一（上）：通过剖析Java JDK源码学习灵活应用设计模式","chapter":"1367"},{"id":230708,"title":"77 | 开源实战一（下）：通过剖析Java JDK源码学习灵活应用设计模式","chapter":"1367"},{"id":232061,"title":"78 | 开源实战二（上）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":232427,"title":"79 | 开源实战二（中）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":232687,"title":"80 | 开源实战二（下）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":233742,"title":"81 | 开源实战三（上）：借Google Guava学习发现和开发通用功能模块","chapter":"1367"},{"id":234758,"title":"82 | 开源实战三（中）：剖析Google Guava中用到的几种设计模式","chapter":"1367"},{"id":235334,"title":"83 | 开源实战三（下）：借Google Guava学习三大编程范式中的函数式编程","chapter":"1367"},{"id":236935,"title":"84 | 开源实战四（上）：剖析Spring框架中蕴含的经典设计思想或原则","chapter":"1367"},{"id":237810,"title":"85 | 开源实战四（中）：剖析Spring框架中用来支持扩展的两种设计模式","chapter":"1367"},{"id":238418,"title":"86 | 开源实战四（下）：总结Spring框架用到的11种设计模式","chapter":"1367"},{"id":239239,"title":"87 | 开源实战五（上）：MyBatis如何权衡易用性、性能和灵活性？","chapter":"1367"},{"id":240147,"title":"88 | 开源实战五（中）：如何利用职责链与代理模式实现MyBatis Plugin？","chapter":"1367"},{"id":240971,"title":"89 | 开源实战五（下）：总结MyBatis框架中用到的10种设计模式","chapter":"1367"},{"id":242314,"title":"90 | 项目实战一：设计实现一个支持各种算法的限流框架（分析）","chapter":"1446"},{"id":243175,"title":"91 | 项目实战一：设计实现一个支持各种算法的限流框架（设计）","chapter":"1446"},{"id":243961,"title":"92 | 项目实战一：设计实现一个支持各种算法的限流框架（实现）","chapter":"1446"},{"id":245022,"title":"93 | 项目实战二：设计实现一个通用的接口幂等框架（分析）","chapter":"1446"},{"id":245788,"title":"94 | 项目实战二：设计实现一个通用的接口幂等框架（设计）","chapter":"1446"},{"id":246379,"title":"95 | 项目实战二：设计实现一个通用的接口幂等框架（实现）","chapter":"1446"},{"id":247776,"title":"96 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（分析）","chapter":"1446"},{"id":248714,"title":"97  | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（设计）","chapter":"1446"},{"id":249369,"title":"98 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（实现）","chapter":"1446"},{"id":250942,"title":"99 | 总结回顾：在实际软件开发中常用的设计思想、原则和模式","chapter":"1480"},{"id":251930,"title":"100 | 如何将设计思想、原则、模式等理论知识应用到项目中？","chapter":"1480"},{"id":166698,"title":"加餐一 | 用一篇文章带你了解专栏中用到的所有Java语法","chapter":"1061"},{"id":172690,"title":"加餐二 | 设计模式、重构、编程规范等相关书籍推荐","chapter":"1061"},{"id":192789,"title":"春节特别加餐 | 王争：如何学习《设计模式之美》专栏？","chapter":"1061"},{"id":252937,"title":"加餐三 | 聊一聊Google是如何做Code Review的","chapter":"1061"},{"id":254190,"title":"加餐四 | 聊一聊Google那些让我快速成长的地方","chapter":"1061"},{"id":255037,"title":"加餐五 | 听一听小争哥对Google工程师文化的解读","chapter":"1061"},{"id":255697,"title":"加餐六 | 什么才是所谓的编程能力？如何考察一个人的编程能力？","chapter":"1061"},{"id":256866,"title":"加餐七 | 基础学科的知识如何转化成实际的技术生产力？","chapter":"1061"},{"id":257513,"title":"加餐八 | 程序员怎么才能让自己走得更高、更远？","chapter":"1061"},{"id":258207,"title":"加餐九 | 作为面试官或候选人，如何面试或回答设计模式问题？","chapter":"1061"},{"id":259489,"title":"加餐十 | 如何接手一坨烂业务代码？如何在烂业务代码中成长？","chapter":"1061"},{"id":260184,"title":"结束语  | 聊一聊机遇、方向、能力、努力！","chapter":"1517"},{"id":160463,"title":"开篇词 | 一对一的设计与编码集训，让你告别没有成长的烂代码！","chapter":"1031"},{"id":160981,"title":"01 | 为什么说每个程序员都要尽早地学习并掌握设计模式相关知识？","chapter":"1032"},{"id":160985,"title":"02 | 从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？","chapter":"1032"},{"id":160991,"title":"03 | 面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？","chapter":"1032"},{"id":161575,"title":"04 | 理论一：当谈论面向对象的时候，我们到底在谈论什么？","chapter":"1037"},{"id":161114,"title":"05 | 理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？","chapter":"1037"},{"id":161587,"title":"06 | 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？","chapter":"1037"},{"id":164907,"title":"07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？","chapter":"1037"},{"id":165103,"title":"08 | 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？","chapter":"1037"},{"id":165114,"title":"09 | 理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？","chapter":"1037"},{"id":169593,"title":"10 | 理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？","chapter":"1037"},{"id":169600,"title":"11 | 实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？","chapter":"1037"},{"id":169631,"title":"12 | 实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？","chapter":"1037"},{"id":171760,"title":"13 | 实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？","chapter":"1037"},{"id":171767,"title":"14 | 实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？","chapter":"1037"},{"id":171771,"title":"15 | 理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？","chapter":"1097"},{"id":176075,"title":"16 | 理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？","chapter":"1097"},{"id":177110,"title":"17 | 理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？","chapter":"1097"},{"id":177442,"title":"18 | 理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？","chapter":"1097"},{"id":177444,"title":"19 | 理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？","chapter":"1097"},{"id":177448,"title":"20 | 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？","chapter":"1097"},{"id":179607,"title":"21 | 理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？","chapter":"1097"},{"id":179615,"title":"22 | 理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？","chapter":"1097"},{"id":182001,"title":"23 | 实战一（上）：针对业务系统的开发，如何做需求分析和设计？","chapter":"1097"},{"id":183007,"title":"24 | 实战一（下）：如何实现一个遵从设计原则的积分兑换系统？","chapter":"1097"},{"id":179644,"title":"25 | 实战二（上）：针对非业务的通用框架开发，如何做需求分析和设计？","chapter":"1097"},{"id":179673,"title":"26 | 实战二（下）：如何实现一个支持各种统计规则的性能计数器？","chapter":"1097"},{"id":179679,"title":"27 | 理论一：什么情况下要重构？到底重构什么？又该如何重构？","chapter":"1202"},{"id":185684,"title":"28 | 理论二：为了保证重构不出错，有哪些非常能落地的技术手段？","chapter":"1202"},{"id":186691,"title":"29 | 理论三：什么是代码的可测试性？如何写出可测试性好的代码？","chapter":"1202"},{"id":187761,"title":"30 | 理论四：如何通过封装、抽象、模块化、中间层等解耦代码？","chapter":"1202"},{"id":188622,"title":"31 | 理论五：让你最快速地改善代码质量的20条编程规范（上）","chapter":"1202"},{"id":188857,"title":"32 | 理论五：让你最快速地改善代码质量的20条编程规范（中）","chapter":"1202"},{"id":188882,"title":"33 | 理论五：让你最快速地改善代码质量的20条编程规范（下）","chapter":"1202"},{"id":190979,"title":"34 | 实战一（上）：通过一段ID生成器代码，学习如何发现代码质量问题","chapter":"1202"},{"id":191621,"title":"35 | 实战一（下）：手把手带你将ID生成器代码从“能用”重构为“好用”","chapter":"1202"},{"id":191642,"title":"36 | 实战二（上）：程序出错该返回啥？NULL、异常、错误码、空对象？","chapter":"1202"},{"id":191647,"title":"37 | 实战二（下）：重构ID生成器项目中各函数的异常处理代码","chapter":"1202"},{"id":193093,"title":"38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点","chapter":"1239"},{"id":193221,"title":"39 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（上）","chapter":"1239"},{"id":193555,"title":"40 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（下）","chapter":"1239"},{"id":194035,"title":"41 | 单例模式（上）：为什么说支持懒加载的双重检测不比饿汉式更优？","chapter":"1246"},{"id":194068,"title":"42 | 单例模式（中）：我为什么不推荐使用单例模式？又有何替代方案？","chapter":"1246"},{"id":196790,"title":"43 | 单例模式（下）：如何设计实现一个集群环境下的分布式单例模式？","chapter":"1246"},{"id":197254,"title":"44 | 工厂模式（上）：我为什么说没事不要随便用工厂模式创建对象？","chapter":"1246"},{"id":198614,"title":"45 | 工厂模式（下）：如何设计实现一个Dependency Injection框架？","chapter":"1246"},{"id":199674,"title":"46 | 建造者模式：详解构造函数、set方法、建造者模式三种对象创建方式","chapter":"1246"},{"id":200786,"title":"47 | 原型模式：如何最快速地clone一个HashMap散列表？","chapter":"1246"},{"id":201823,"title":"48 | 代理模式：代理在RPC、缓存、监控等场景中的应用","chapter":"1271"},{"id":202786,"title":"49 | 桥接模式：如何实现支持不同类型和渠道的消息推送系统？","chapter":"1271"},{"id":204845,"title":"50 | 装饰器模式：通过剖析Java IO类库源码学习装饰器模式","chapter":"1271"},{"id":205912,"title":"51 | 适配器模式：代理、适配器、桥接、装饰，这四个模式有何区别？","chapter":"1271"},{"id":206409,"title":"52 | 门面模式：如何设计合理的接口粒度以兼顾接口的易用性和通用性？","chapter":"1271"},{"id":207456,"title":"53 | 组合模式：如何设计实现支持递归遍历的文件系统目录树结构？","chapter":"1271"},{"id":208572,"title":"54 | 享元模式（上）：如何利用享元模式优化文本编辑器的内存占用？","chapter":"1271"},{"id":209343,"title":"55 | 享元模式（下）：剖析享元模式在Java Integer、String中的应用","chapter":"1271"},{"id":210170,"title":"56 | 观察者模式（上）：详解各种应用场景下观察者模式的不同实现方式","chapter":"1289"},{"id":211239,"title":"57 | 观察者模式（下）：如何实现一个异步非阻塞的EventBus框架？","chapter":"1289"},{"id":212049,"title":"58 | 模板模式（上）：剖析模板模式在JDK、Servlet、JUnit等中的应用","chapter":"1289"},{"id":212802,"title":"59 | 模板模式（下）：模板模式与Callback回调函数有何区别和联系？","chapter":"1289"},{"id":214014,"title":"60 | 策略模式（上）：如何避免冗长的if-else/switch分支判断代码？","chapter":"1289"},{"id":215132,"title":"61 | 策略模式（下）：如何实现一个支持给不同大小文件排序的小程序？","chapter":"1289"},{"id":216278,"title":"62 | 职责链模式（上）：如何实现可灵活扩展算法的敏感信息过滤框架？","chapter":"1289"},{"id":217395,"title":"63 | 职责链模式（下）：框架中常用的过滤器、拦截器是如何实现的？","chapter":"1289"},{"id":218375,"title":"64 | 状态模式：游戏、工作流引擎中常用的状态机是如何实现的？","chapter":"1289"},{"id":219290,"title":"65 | 迭代器模式（上）：相比直接遍历集合数据，使用迭代器有哪些优势？","chapter":"1289"},{"id":219964,"title":"66 | 迭代器模式（中）：遍历集合的同时，为什么不能增删集合元素？","chapter":"1289"},{"id":221269,"title":"67 | 迭代器模式（下）：如何设计实现一个支持“快照”功能的iterator？","chapter":"1289"},{"id":221852,"title":"68 | 访问者模式（上）：手把手带你还原访问者模式诞生的思维过程","chapter":"1289"},{"id":222762,"title":"69 | 访问者模式（下）：为什么支持双分派的语言不需要访问者模式？","chapter":"1289"},{"id":223947,"title":"70 | 备忘录模式：对于大对象的备份和恢复，如何优化内存和时间的消耗？","chapter":"1289"},{"id":224549,"title":"71 | 命令模式：如何利用命令模式实现一个手游后端架构？","chapter":"1289"},{"id":225904,"title":"72 | 解释器模式：如何设计实现一个自定义接口告警规则功能？","chapter":"1289"},{"id":226710,"title":"73 | 中介模式：什么时候用中介模式？什么时候用观察者模式？","chapter":"1289"},{"id":227452,"title":"74 | 总结回顾23种经典设计模式的原理、背后的思想、应用场景等","chapter":"1356"},{"id":229157,"title":"75 | 在实际的项目开发中，如何避免过度设计？又如何避免设计不足？","chapter":"1356"},{"id":229996,"title":"76 |  开源实战一（上）：通过剖析Java JDK源码学习灵活应用设计模式","chapter":"1367"},{"id":230708,"title":"77 | 开源实战一（下）：通过剖析Java JDK源码学习灵活应用设计模式","chapter":"1367"},{"id":232061,"title":"78 | 开源实战二（上）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":232427,"title":"79 | 开源实战二（中）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":232687,"title":"80 | 开源实战二（下）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":233742,"title":"81 | 开源实战三（上）：借Google Guava学习发现和开发通用功能模块","chapter":"1367"},{"id":234758,"title":"82 | 开源实战三（中）：剖析Google Guava中用到的几种设计模式","chapter":"1367"},{"id":235334,"title":"83 | 开源实战三（下）：借Google Guava学习三大编程范式中的函数式编程","chapter":"1367"},{"id":236935,"title":"84 | 开源实战四（上）：剖析Spring框架中蕴含的经典设计思想或原则","chapter":"1367"},{"id":237810,"title":"85 | 开源实战四（中）：剖析Spring框架中用来支持扩展的两种设计模式","chapter":"1367"},{"id":238418,"title":"86 | 开源实战四（下）：总结Spring框架用到的11种设计模式","chapter":"1367"},{"id":239239,"title":"87 | 开源实战五（上）：MyBatis如何权衡易用性、性能和灵活性？","chapter":"1367"},{"id":240147,"title":"88 | 开源实战五（中）：如何利用职责链与代理模式实现MyBatis Plugin？","chapter":"1367"},{"id":240971,"title":"89 | 开源实战五（下）：总结MyBatis框架中用到的10种设计模式","chapter":"1367"},{"id":242314,"title":"90 | 项目实战一：设计实现一个支持各种算法的限流框架（分析）","chapter":"1446"},{"id":243175,"title":"91 | 项目实战一：设计实现一个支持各种算法的限流框架（设计）","chapter":"1446"},{"id":243961,"title":"92 | 项目实战一：设计实现一个支持各种算法的限流框架（实现）","chapter":"1446"},{"id":245022,"title":"93 | 项目实战二：设计实现一个通用的接口幂等框架（分析）","chapter":"1446"},{"id":245788,"title":"94 | 项目实战二：设计实现一个通用的接口幂等框架（设计）","chapter":"1446"},{"id":246379,"title":"95 | 项目实战二：设计实现一个通用的接口幂等框架（实现）","chapter":"1446"},{"id":247776,"title":"96 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（分析）","chapter":"1446"},{"id":248714,"title":"97  | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（设计）","chapter":"1446"},{"id":249369,"title":"98 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（实现）","chapter":"1446"},{"id":250942,"title":"99 | 总结回顾：在实际软件开发中常用的设计思想、原则和模式","chapter":"1480"},{"id":251930,"title":"100 | 如何将设计思想、原则、模式等理论知识应用到项目中？","chapter":"1480"},{"id":166698,"title":"加餐一 | 用一篇文章带你了解专栏中用到的所有Java语法","chapter":"1061"},{"id":172690,"title":"加餐二 | 设计模式、重构、编程规范等相关书籍推荐","chapter":"1061"},{"id":192789,"title":"春节特别加餐 | 王争：如何学习《设计模式之美》专栏？","chapter":"1061"},{"id":252937,"title":"加餐三 | 聊一聊Google是如何做Code Review的","chapter":"1061"},{"id":254190,"title":"加餐四 | 聊一聊Google那些让我快速成长的地方","chapter":"1061"},{"id":255037,"title":"加餐五 | 听一听小争哥对Google工程师文化的解读","chapter":"1061"},{"id":255697,"title":"加餐六 | 什么才是所谓的编程能力？如何考察一个人的编程能力？","chapter":"1061"},{"id":256866,"title":"加餐七 | 基础学科的知识如何转化成实际的技术生产力？","chapter":"1061"},{"id":257513,"title":"加餐八 | 程序员怎么才能让自己走得更高、更远？","chapter":"1061"},{"id":258207,"title":"加餐九 | 作为面试官或候选人，如何面试或回答设计模式问题？","chapter":"1061"},{"id":259489,"title":"加餐十 | 如何接手一坨烂业务代码？如何在烂业务代码中成长？","chapter":"1061"},{"id":260184,"title":"结束语  | 聊一聊机遇、方向、能力、努力！","chapter":"1517"},{"id":160463,"title":"开篇词 | 一对一的设计与编码集训，让你告别没有成长的烂代码！","chapter":"1031"},{"id":160981,"title":"01 | 为什么说每个程序员都要尽早地学习并掌握设计模式相关知识？","chapter":"1032"},{"id":160985,"title":"02 | 从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？","chapter":"1032"},{"id":160991,"title":"03 | 面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？","chapter":"1032"},{"id":161575,"title":"04 | 理论一：当谈论面向对象的时候，我们到底在谈论什么？","chapter":"1037"},{"id":161114,"title":"05 | 理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？","chapter":"1037"},{"id":161587,"title":"06 | 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？","chapter":"1037"},{"id":164907,"title":"07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？","chapter":"1037"},{"id":165103,"title":"08 | 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？","chapter":"1037"},{"id":165114,"title":"09 | 理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？","chapter":"1037"},{"id":169593,"title":"10 | 理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？","chapter":"1037"},{"id":169600,"title":"11 | 实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？","chapter":"1037"},{"id":169631,"title":"12 | 实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？","chapter":"1037"},{"id":171760,"title":"13 | 实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？","chapter":"1037"},{"id":171767,"title":"14 | 实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？","chapter":"1037"},{"id":171771,"title":"15 | 理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？","chapter":"1097"},{"id":176075,"title":"16 | 理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？","chapter":"1097"},{"id":177110,"title":"17 | 理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？","chapter":"1097"},{"id":177442,"title":"18 | 理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？","chapter":"1097"},{"id":177444,"title":"19 | 理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？","chapter":"1097"},{"id":177448,"title":"20 | 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？","chapter":"1097"},{"id":179607,"title":"21 | 理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？","chapter":"1097"},{"id":179615,"title":"22 | 理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？","chapter":"1097"},{"id":182001,"title":"23 | 实战一（上）：针对业务系统的开发，如何做需求分析和设计？","chapter":"1097"},{"id":183007,"title":"24 | 实战一（下）：如何实现一个遵从设计原则的积分兑换系统？","chapter":"1097"},{"id":179644,"title":"25 | 实战二（上）：针对非业务的通用框架开发，如何做需求分析和设计？","chapter":"1097"},{"id":179673,"title":"26 | 实战二（下）：如何实现一个支持各种统计规则的性能计数器？","chapter":"1097"},{"id":179679,"title":"27 | 理论一：什么情况下要重构？到底重构什么？又该如何重构？","chapter":"1202"},{"id":185684,"title":"28 | 理论二：为了保证重构不出错，有哪些非常能落地的技术手段？","chapter":"1202"},{"id":186691,"title":"29 | 理论三：什么是代码的可测试性？如何写出可测试性好的代码？","chapter":"1202"},{"id":187761,"title":"30 | 理论四：如何通过封装、抽象、模块化、中间层等解耦代码？","chapter":"1202"},{"id":188622,"title":"31 | 理论五：让你最快速地改善代码质量的20条编程规范（上）","chapter":"1202"},{"id":188857,"title":"32 | 理论五：让你最快速地改善代码质量的20条编程规范（中）","chapter":"1202"},{"id":188882,"title":"33 | 理论五：让你最快速地改善代码质量的20条编程规范（下）","chapter":"1202"},{"id":190979,"title":"34 | 实战一（上）：通过一段ID生成器代码，学习如何发现代码质量问题","chapter":"1202"},{"id":191621,"title":"35 | 实战一（下）：手把手带你将ID生成器代码从“能用”重构为“好用”","chapter":"1202"},{"id":191642,"title":"36 | 实战二（上）：程序出错该返回啥？NULL、异常、错误码、空对象？","chapter":"1202"},{"id":191647,"title":"37 | 实战二（下）：重构ID生成器项目中各函数的异常处理代码","chapter":"1202"},{"id":193093,"title":"38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点","chapter":"1239"},{"id":193221,"title":"39 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（上）","chapter":"1239"},{"id":193555,"title":"40 | 运用学过的设计原则和思想完善之前讲的性能计数器项目（下）","chapter":"1239"},{"id":194035,"title":"41 | 单例模式（上）：为什么说支持懒加载的双重检测不比饿汉式更优？","chapter":"1246"},{"id":194068,"title":"42 | 单例模式（中）：我为什么不推荐使用单例模式？又有何替代方案？","chapter":"1246"},{"id":196790,"title":"43 | 单例模式（下）：如何设计实现一个集群环境下的分布式单例模式？","chapter":"1246"},{"id":197254,"title":"44 | 工厂模式（上）：我为什么说没事不要随便用工厂模式创建对象？","chapter":"1246"},{"id":198614,"title":"45 | 工厂模式（下）：如何设计实现一个Dependency Injection框架？","chapter":"1246"},{"id":199674,"title":"46 | 建造者模式：详解构造函数、set方法、建造者模式三种对象创建方式","chapter":"1246"},{"id":200786,"title":"47 | 原型模式：如何最快速地clone一个HashMap散列表？","chapter":"1246"},{"id":201823,"title":"48 | 代理模式：代理在RPC、缓存、监控等场景中的应用","chapter":"1271"},{"id":202786,"title":"49 | 桥接模式：如何实现支持不同类型和渠道的消息推送系统？","chapter":"1271"},{"id":204845,"title":"50 | 装饰器模式：通过剖析Java IO类库源码学习装饰器模式","chapter":"1271"},{"id":205912,"title":"51 | 适配器模式：代理、适配器、桥接、装饰，这四个模式有何区别？","chapter":"1271"},{"id":206409,"title":"52 | 门面模式：如何设计合理的接口粒度以兼顾接口的易用性和通用性？","chapter":"1271"},{"id":207456,"title":"53 | 组合模式：如何设计实现支持递归遍历的文件系统目录树结构？","chapter":"1271"},{"id":208572,"title":"54 | 享元模式（上）：如何利用享元模式优化文本编辑器的内存占用？","chapter":"1271"},{"id":209343,"title":"55 | 享元模式（下）：剖析享元模式在Java Integer、String中的应用","chapter":"1271"},{"id":210170,"title":"56 | 观察者模式（上）：详解各种应用场景下观察者模式的不同实现方式","chapter":"1289"},{"id":211239,"title":"57 | 观察者模式（下）：如何实现一个异步非阻塞的EventBus框架？","chapter":"1289"},{"id":212049,"title":"58 | 模板模式（上）：剖析模板模式在JDK、Servlet、JUnit等中的应用","chapter":"1289"},{"id":212802,"title":"59 | 模板模式（下）：模板模式与Callback回调函数有何区别和联系？","chapter":"1289"},{"id":214014,"title":"60 | 策略模式（上）：如何避免冗长的if-else/switch分支判断代码？","chapter":"1289"},{"id":215132,"title":"61 | 策略模式（下）：如何实现一个支持给不同大小文件排序的小程序？","chapter":"1289"},{"id":216278,"title":"62 | 职责链模式（上）：如何实现可灵活扩展算法的敏感信息过滤框架？","chapter":"1289"},{"id":217395,"title":"63 | 职责链模式（下）：框架中常用的过滤器、拦截器是如何实现的？","chapter":"1289"},{"id":218375,"title":"64 | 状态模式：游戏、工作流引擎中常用的状态机是如何实现的？","chapter":"1289"},{"id":219290,"title":"65 | 迭代器模式（上）：相比直接遍历集合数据，使用迭代器有哪些优势？","chapter":"1289"},{"id":219964,"title":"66 | 迭代器模式（中）：遍历集合的同时，为什么不能增删集合元素？","chapter":"1289"},{"id":221269,"title":"67 | 迭代器模式（下）：如何设计实现一个支持“快照”功能的iterator？","chapter":"1289"},{"id":221852,"title":"68 | 访问者模式（上）：手把手带你还原访问者模式诞生的思维过程","chapter":"1289"},{"id":222762,"title":"69 | 访问者模式（下）：为什么支持双分派的语言不需要访问者模式？","chapter":"1289"},{"id":223947,"title":"70 | 备忘录模式：对于大对象的备份和恢复，如何优化内存和时间的消耗？","chapter":"1289"},{"id":224549,"title":"71 | 命令模式：如何利用命令模式实现一个手游后端架构？","chapter":"1289"},{"id":225904,"title":"72 | 解释器模式：如何设计实现一个自定义接口告警规则功能？","chapter":"1289"},{"id":226710,"title":"73 | 中介模式：什么时候用中介模式？什么时候用观察者模式？","chapter":"1289"},{"id":227452,"title":"74 | 总结回顾23种经典设计模式的原理、背后的思想、应用场景等","chapter":"1356"},{"id":229157,"title":"75 | 在实际的项目开发中，如何避免过度设计？又如何避免设计不足？","chapter":"1356"},{"id":229996,"title":"76 |  开源实战一（上）：通过剖析Java JDK源码学习灵活应用设计模式","chapter":"1367"},{"id":230708,"title":"77 | 开源实战一（下）：通过剖析Java JDK源码学习灵活应用设计模式","chapter":"1367"},{"id":232061,"title":"78 | 开源实战二（上）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":232427,"title":"79 | 开源实战二（中）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":232687,"title":"80 | 开源实战二（下）：从Unix开源开发学习应对大型复杂项目开发","chapter":"1367"},{"id":233742,"title":"81 | 开源实战三（上）：借Google Guava学习发现和开发通用功能模块","chapter":"1367"},{"id":234758,"title":"82 | 开源实战三（中）：剖析Google Guava中用到的几种设计模式","chapter":"1367"},{"id":235334,"title":"83 | 开源实战三（下）：借Google Guava学习三大编程范式中的函数式编程","chapter":"1367"},{"id":236935,"title":"84 | 开源实战四（上）：剖析Spring框架中蕴含的经典设计思想或原则","chapter":"1367"},{"id":237810,"title":"85 | 开源实战四（中）：剖析Spring框架中用来支持扩展的两种设计模式","chapter":"1367"},{"id":238418,"title":"86 | 开源实战四（下）：总结Spring框架用到的11种设计模式","chapter":"1367"},{"id":239239,"title":"87 | 开源实战五（上）：MyBatis如何权衡易用性、性能和灵活性？","chapter":"1367"},{"id":240147,"title":"88 | 开源实战五（中）：如何利用职责链与代理模式实现MyBatis Plugin？","chapter":"1367"},{"id":240971,"title":"89 | 开源实战五（下）：总结MyBatis框架中用到的10种设计模式","chapter":"1367"},{"id":242314,"title":"90 | 项目实战一：设计实现一个支持各种算法的限流框架（分析）","chapter":"1446"},{"id":243175,"title":"91 | 项目实战一：设计实现一个支持各种算法的限流框架（设计）","chapter":"1446"},{"id":243961,"title":"92 | 项目实战一：设计实现一个支持各种算法的限流框架（实现）","chapter":"1446"},{"id":245022,"title":"93 | 项目实战二：设计实现一个通用的接口幂等框架（分析）","chapter":"1446"},{"id":245788,"title":"94 | 项目实战二：设计实现一个通用的接口幂等框架（设计）","chapter":"1446"},{"id":246379,"title":"95 | 项目实战二：设计实现一个通用的接口幂等框架（实现）","chapter":"1446"},{"id":247776,"title":"96 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（分析）","chapter":"1446"},{"id":248714,"title":"97  | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（设计）","chapter":"1446"},{"id":249369,"title":"98 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（实现）","chapter":"1446"},{"id":250942,"title":"99 | 总结回顾：在实际软件开发中常用的设计思想、原则和模式","chapter":"1480"},{"id":251930,"title":"100 | 如何将设计思想、原则、模式等理论知识应用到项目中？","chapter":"1480"},{"id":166698,"title":"加餐一 | 用一篇文章带你了解专栏中用到的所有Java语法","chapter":"1061"},{"id":172690,"title":"加餐二 | 设计模式、重构、编程规范等相关书籍推荐","chapter":"1061"},{"id":192789,"title":"春节特别加餐 | 王争：如何学习《设计模式之美》专栏？","chapter":"1061"},{"id":252937,"title":"加餐三 | 聊一聊Google是如何做Code Review的","chapter":"1061"},{"id":254190,"title":"加餐四 | 聊一聊Google那些让我快速成长的地方","chapter":"1061"},{"id":255037,"title":"加餐五 | 听一听小争哥对Google工程师文化的解读","chapter":"1061"},{"id":255697,"title":"加餐六 | 什么才是所谓的编程能力？如何考察一个人的编程能力？","chapter":"1061"},{"id":256866,"title":"加餐七 | 基础学科的知识如何转化成实际的技术生产力？","chapter":"1061"},{"id":257513,"title":"加餐八 | 程序员怎么才能让自己走得更高、更远？","chapter":"1061"},{"id":258207,"title":"加餐九 | 作为面试官或候选人，如何面试或回答设计模式问题？","chapter":"1061"},{"id":259489,"title":"加餐十 | 如何接手一坨烂业务代码？如何在烂业务代码中成长？","chapter":"1061"},{"id":260184,"title":"结束语  | 聊一聊机遇、方向、能力、努力！","chapter":"1517"}]}