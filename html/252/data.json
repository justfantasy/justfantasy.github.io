{"title":"JavaScript核心原理解析","author":"周爱民","cover":"https://static001.geekbang.org/resource/image/92/a8/929d8218199f09b6a2a4cd29024e58a8.png","cid":252,"list":[{"id":163480,"title":"开篇词 | 如何解决语言问题？","chapter":"1047"},{"id":164312,"title":"01 | delete 0：JavaScript中到底有什么是可以销毁的","chapter":"1048"},{"id":165198,"title":"02 | var x = y = 100：声明语句与语法改变了JavaScript语言核心性质","chapter":"1048"},{"id":165985,"title":"03 | a.x = a = {n:2}：一道被无数人无数次地解释过的经典面试题","chapter":"1048"},{"id":166491,"title":"04 | export default function() {}：你无法导出一个匿名函数表达式","chapter":"1048"},{"id":167907,"title":"05 | for (let x of [1,2,3]) ...：for循环并不比使用函数递归节省开销","chapter":"1048"},{"id":171116,"title":"加餐 | 捡豆吃豆的学问（上）：这门课讲的是什么？","chapter":"1048"},{"id":171125,"title":"加餐 | 捡豆吃豆的学问（下）：这门课该怎么学？","chapter":"1048"},{"id":168980,"title":"06 | x: break x;  搞懂如何在循环外使用break，方知语句执行真解","chapter":"1074"},{"id":169584,"title":"07 | `${1}`：详解JavaScript中特殊的可执行结构","chapter":"1074"},{"id":171617,"title":"08 | x => x：函数式语言的核心抽象：函数与表达式的同一性","chapter":"1074"},{"id":172636,"title":"09 | (...x)：不是表达式、语句、函数，但它却能执行","chapter":"1074"},{"id":174314,"title":"10 | x = yield x：迭代过程的“函数式化”","chapter":"1074"},{"id":175044,"title":"11 | throw 1;：它在“最简单语法榜”上排名第三","chapter":"1074"},{"id":175261,"title":"加餐 | 让JavaScript运行起来","chapter":"1074"},{"id":176975,"title":"12 | 1 in 1..constructor：这行代码的结果，既可能是true，也可能是false","chapter":"1137"},{"id":177397,"title":"13 | new X：从构造器到类，为你揭密对象构造的全程","chapter":"1137"},{"id":178150,"title":"14 | super.xxx()：虽然直到ES10还是个半吊子实现，却也值得一讲","chapter":"1137"},{"id":179238,"title":"15 | return Object.create(new.target.prototype)：做框架设计的基本功：写一个根类","chapter":"1137"},{"id":179774,"title":"16 | [a, b] = {a, b}：让你从一行代码看到对象的本质","chapter":"1137"},{"id":181429,"title":"17 | Object.setPrototypeOf(x, null)：连Brendan Eich都认错，但null值还活着","chapter":"1137"},{"id":181952,"title":"18 | a + b：动态类型是灾难之源还是最好的特性？（上）","chapter":"1177"},{"id":182300,"title":"19 | a + b：动态类型是灾难之源还是最好的特性？（下）","chapter":"1177"},{"id":183440,"title":"20 | (0, eval)(\"x = 100\") ：一行让严格模式形同虚设的破坏性设计（上）","chapter":"1177"},{"id":184589,"title":"21 | (0, eval)(\"x = 100\") ：一行让严格模式形同虚设的破坏性设计（下）","chapter":"1177"},{"id":185031,"title":"22 | new Function('x = 100')();：函数的类化是对动态与静态系统的再次统一","chapter":"1177"},{"id":185727,"title":"结束语 | 愿你能做一个真正“懂”的程序员","chapter":"1204"},{"id":252779,"title":"结课测试 | 这些JavaScript知识，你真的掌握了吗？","chapter":"1204"},{"id":163480,"title":"开篇词 | 如何解决语言问题？","chapter":"1047"},{"id":164312,"title":"01 | delete 0：JavaScript中到底有什么是可以销毁的","chapter":"1048"},{"id":165198,"title":"02 | var x = y = 100：声明语句与语法改变了JavaScript语言核心性质","chapter":"1048"},{"id":165985,"title":"03 | a.x = a = {n:2}：一道被无数人无数次地解释过的经典面试题","chapter":"1048"},{"id":166491,"title":"04 | export default function() {}：你无法导出一个匿名函数表达式","chapter":"1048"},{"id":167907,"title":"05 | for (let x of [1,2,3]) ...：for循环并不比使用函数递归节省开销","chapter":"1048"},{"id":171116,"title":"加餐 | 捡豆吃豆的学问（上）：这门课讲的是什么？","chapter":"1048"},{"id":171125,"title":"加餐 | 捡豆吃豆的学问（下）：这门课该怎么学？","chapter":"1048"},{"id":168980,"title":"06 | x: break x;  搞懂如何在循环外使用break，方知语句执行真解","chapter":"1074"},{"id":169584,"title":"07 | `${1}`：详解JavaScript中特殊的可执行结构","chapter":"1074"},{"id":171617,"title":"08 | x => x：函数式语言的核心抽象：函数与表达式的同一性","chapter":"1074"},{"id":172636,"title":"09 | (...x)：不是表达式、语句、函数，但它却能执行","chapter":"1074"},{"id":174314,"title":"10 | x = yield x：迭代过程的“函数式化”","chapter":"1074"},{"id":175044,"title":"11 | throw 1;：它在“最简单语法榜”上排名第三","chapter":"1074"},{"id":175261,"title":"加餐 | 让JavaScript运行起来","chapter":"1074"},{"id":176975,"title":"12 | 1 in 1..constructor：这行代码的结果，既可能是true，也可能是false","chapter":"1137"},{"id":177397,"title":"13 | new X：从构造器到类，为你揭密对象构造的全程","chapter":"1137"},{"id":178150,"title":"14 | super.xxx()：虽然直到ES10还是个半吊子实现，却也值得一讲","chapter":"1137"},{"id":179238,"title":"15 | return Object.create(new.target.prototype)：做框架设计的基本功：写一个根类","chapter":"1137"},{"id":179774,"title":"16 | [a, b] = {a, b}：让你从一行代码看到对象的本质","chapter":"1137"},{"id":181429,"title":"17 | Object.setPrototypeOf(x, null)：连Brendan Eich都认错，但null值还活着","chapter":"1137"},{"id":181952,"title":"18 | a + b：动态类型是灾难之源还是最好的特性？（上）","chapter":"1177"},{"id":182300,"title":"19 | a + b：动态类型是灾难之源还是最好的特性？（下）","chapter":"1177"},{"id":183440,"title":"20 | (0, eval)(\"x = 100\") ：一行让严格模式形同虚设的破坏性设计（上）","chapter":"1177"},{"id":184589,"title":"21 | (0, eval)(\"x = 100\") ：一行让严格模式形同虚设的破坏性设计（下）","chapter":"1177"},{"id":185031,"title":"22 | new Function('x = 100')();：函数的类化是对动态与静态系统的再次统一","chapter":"1177"},{"id":185727,"title":"结束语 | 愿你能做一个真正“懂”的程序员","chapter":"1204"},{"id":252779,"title":"结课测试 | 这些JavaScript知识，你真的掌握了吗？","chapter":"1204"},{"id":163480,"title":"开篇词 | 如何解决语言问题？","chapter":"1047"},{"id":164312,"title":"01 | delete 0：JavaScript中到底有什么是可以销毁的","chapter":"1048"},{"id":165198,"title":"02 | var x = y = 100：声明语句与语法改变了JavaScript语言核心性质","chapter":"1048"},{"id":165985,"title":"03 | a.x = a = {n:2}：一道被无数人无数次地解释过的经典面试题","chapter":"1048"},{"id":166491,"title":"04 | export default function() {}：你无法导出一个匿名函数表达式","chapter":"1048"},{"id":167907,"title":"05 | for (let x of [1,2,3]) ...：for循环并不比使用函数递归节省开销","chapter":"1048"},{"id":171116,"title":"加餐 | 捡豆吃豆的学问（上）：这门课讲的是什么？","chapter":"1048"},{"id":171125,"title":"加餐 | 捡豆吃豆的学问（下）：这门课该怎么学？","chapter":"1048"},{"id":168980,"title":"06 | x: break x;  搞懂如何在循环外使用break，方知语句执行真解","chapter":"1074"},{"id":169584,"title":"07 | `${1}`：详解JavaScript中特殊的可执行结构","chapter":"1074"},{"id":171617,"title":"08 | x => x：函数式语言的核心抽象：函数与表达式的同一性","chapter":"1074"},{"id":172636,"title":"09 | (...x)：不是表达式、语句、函数，但它却能执行","chapter":"1074"},{"id":174314,"title":"10 | x = yield x：迭代过程的“函数式化”","chapter":"1074"},{"id":175044,"title":"11 | throw 1;：它在“最简单语法榜”上排名第三","chapter":"1074"},{"id":175261,"title":"加餐 | 让JavaScript运行起来","chapter":"1074"},{"id":176975,"title":"12 | 1 in 1..constructor：这行代码的结果，既可能是true，也可能是false","chapter":"1137"},{"id":177397,"title":"13 | new X：从构造器到类，为你揭密对象构造的全程","chapter":"1137"},{"id":178150,"title":"14 | super.xxx()：虽然直到ES10还是个半吊子实现，却也值得一讲","chapter":"1137"},{"id":179238,"title":"15 | return Object.create(new.target.prototype)：做框架设计的基本功：写一个根类","chapter":"1137"},{"id":179774,"title":"16 | [a, b] = {a, b}：让你从一行代码看到对象的本质","chapter":"1137"},{"id":181429,"title":"17 | Object.setPrototypeOf(x, null)：连Brendan Eich都认错，但null值还活着","chapter":"1137"},{"id":181952,"title":"18 | a + b：动态类型是灾难之源还是最好的特性？（上）","chapter":"1177"},{"id":182300,"title":"19 | a + b：动态类型是灾难之源还是最好的特性？（下）","chapter":"1177"},{"id":183440,"title":"20 | (0, eval)(\"x = 100\") ：一行让严格模式形同虚设的破坏性设计（上）","chapter":"1177"},{"id":184589,"title":"21 | (0, eval)(\"x = 100\") ：一行让严格模式形同虚设的破坏性设计（下）","chapter":"1177"},{"id":185031,"title":"22 | new Function('x = 100')();：函数的类化是对动态与静态系统的再次统一","chapter":"1177"},{"id":185727,"title":"结束语 | 愿你能做一个真正“懂”的程序员","chapter":"1204"},{"id":252779,"title":"结课测试 | 这些JavaScript知识，你真的掌握了吗？","chapter":"1204"}]}