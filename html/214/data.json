{"title":"网络编程实战","author":"盛延敏","cover":"https://static001.geekbang.org/resource/image/53/33/53b716c060427cb24a2dfc65c076a033.jpg","cid":214,"list":[{"id":111267,"title":"开篇词 | 学好网络编程，需要掌握哪些核心问题？","chapter":"803"},{"id":112010,"title":"01 | 追古溯源：TCP/IP和Linux是如何改变世界的？","chapter":"809"},{"id":112307,"title":"02 | 网络编程模型：认识客户端-服务器网络模型的基本概念","chapter":"809"},{"id":113607,"title":"03丨套接字和地址：像电话和电话号码一样理解它们","chapter":"809"},{"id":116042,"title":"04 | TCP三次握手：怎么使用套接字格式建立连接？","chapter":"809"},{"id":116043,"title":"05 | 使用套接字进行读写：开始交流吧","chapter":"809"},{"id":118122,"title":"06 | 嗨，别忘了UDP这个小兄弟","chapter":"809"},{"id":118721,"title":"07 | What? 还有本地套接字？","chapter":"809"},{"id":118990,"title":"08 | 工欲善其事必先利其器：学会使用各种工具","chapter":"809"},{"id":120390,"title":"09丨答疑篇：学习网络编程前，需要准备哪些东西？","chapter":"809"},{"id":125806,"title":"10 | TIME_WAIT：隐藏在细节下的魔鬼","chapter":"852"},{"id":126126,"title":"11 | 优雅地关闭还是粗暴地关闭 ?","chapter":"852"},{"id":127900,"title":"12 | 连接无效：使用Keep-Alive还是应用心跳来检测？","chapter":"852"},{"id":128609,"title":"13 | 小数据包应对之策：理解TCP协议中的动态数据传输","chapter":"852"},{"id":129807,"title":"14丨UDP也可以是“已连接”？","chapter":"852"},{"id":131670,"title":"15 | 怎么老是出现“地址已经被使用”？","chapter":"852"},{"id":132443,"title":"16 | 如何理解TCP的“流”？","chapter":"852"},{"id":132639,"title":"17 | TCP并不总是“可靠”的？","chapter":"852"},{"id":134606,"title":"18 | 防人之心不可无：检查数据的有效性","chapter":"852"},{"id":135735,"title":"19丨提高篇答疑：如何理解TCP四次挥手？","chapter":"852"},{"id":136549,"title":"期中大作业丨动手编写一个自己的程序吧！","chapter":"899"},{"id":138405,"title":"期中大作业丨题目以及解答剖析","chapter":"899"},{"id":138948,"title":"20 | 大名⿍⿍的select：看我如何同时感知多个I/O事件","chapter":"912"},{"id":140520,"title":"21 | poll：另一种I/O多路复用","chapter":"912"},{"id":141573,"title":"22 | 非阻塞I/O：提升性能的加速器","chapter":"912"},{"id":143245,"title":"23 | Linux利器：epoll的前世今生","chapter":"912"},{"id":143388,"title":"24 | C10K问题：高并发模型设计","chapter":"912"},{"id":143410,"title":"25 | 使用阻塞I/O和进程模型：最传统的方式","chapter":"912"},{"id":145464,"title":"26 | 使用阻塞I/O和线程模型：换一种轻量的方式","chapter":"912"},{"id":146664,"title":"27 | I/O多路复用遇上线程：使用poll单线程处理所有I/O事件","chapter":"912"},{"id":148148,"title":"28 | I/O多路复用进阶：子线程使用poll处理连接I/O事件","chapter":"912"},{"id":149204,"title":"29 | 渐入佳境：使用epoll和多线程模型","chapter":"912"},{"id":150780,"title":"30 | 真正的大杀器：异步I/O探索","chapter":"912"},{"id":152137,"title":"31丨性能篇答疑：epoll源码深度剖析","chapter":"912"},{"id":152668,"title":"32 | 自己动手写高性能HTTP服务器（一）：设计和思路","chapter":"1006"},{"id":154597,"title":"33 | 自己动手写高性能HTTP服务器（二）：I/O模型和多线程模型实现","chapter":"1006"},{"id":155273,"title":"34 | 自己动手写高性能HTTP服务器（三）：TCP字节流处理和HTTP协议实现","chapter":"1006"},{"id":156948,"title":"35 | 答疑：编写高性能网络编程框架时，都需要注意哪些问题？","chapter":"1006"},{"id":158003,"title":"结束语丨我相信这不是结束，让我们江湖再见","chapter":"1026"},{"id":239110,"title":"期末测试题丨有关网络编程的知识，你掌握了多少呢？","chapter":"1427"},{"id":111267,"title":"开篇词 | 学好网络编程，需要掌握哪些核心问题？","chapter":"803"},{"id":112010,"title":"01 | 追古溯源：TCP/IP和Linux是如何改变世界的？","chapter":"809"},{"id":112307,"title":"02 | 网络编程模型：认识客户端-服务器网络模型的基本概念","chapter":"809"},{"id":113607,"title":"03丨套接字和地址：像电话和电话号码一样理解它们","chapter":"809"},{"id":116042,"title":"04 | TCP三次握手：怎么使用套接字格式建立连接？","chapter":"809"},{"id":116043,"title":"05 | 使用套接字进行读写：开始交流吧","chapter":"809"},{"id":118122,"title":"06 | 嗨，别忘了UDP这个小兄弟","chapter":"809"},{"id":118721,"title":"07 | What? 还有本地套接字？","chapter":"809"},{"id":118990,"title":"08 | 工欲善其事必先利其器：学会使用各种工具","chapter":"809"},{"id":120390,"title":"09丨答疑篇：学习网络编程前，需要准备哪些东西？","chapter":"809"},{"id":125806,"title":"10 | TIME_WAIT：隐藏在细节下的魔鬼","chapter":"852"},{"id":126126,"title":"11 | 优雅地关闭还是粗暴地关闭 ?","chapter":"852"},{"id":127900,"title":"12 | 连接无效：使用Keep-Alive还是应用心跳来检测？","chapter":"852"},{"id":128609,"title":"13 | 小数据包应对之策：理解TCP协议中的动态数据传输","chapter":"852"},{"id":129807,"title":"14丨UDP也可以是“已连接”？","chapter":"852"},{"id":131670,"title":"15 | 怎么老是出现“地址已经被使用”？","chapter":"852"},{"id":132443,"title":"16 | 如何理解TCP的“流”？","chapter":"852"},{"id":132639,"title":"17 | TCP并不总是“可靠”的？","chapter":"852"},{"id":134606,"title":"18 | 防人之心不可无：检查数据的有效性","chapter":"852"},{"id":135735,"title":"19丨提高篇答疑：如何理解TCP四次挥手？","chapter":"852"},{"id":136549,"title":"期中大作业丨动手编写一个自己的程序吧！","chapter":"899"},{"id":138405,"title":"期中大作业丨题目以及解答剖析","chapter":"899"},{"id":138948,"title":"20 | 大名⿍⿍的select：看我如何同时感知多个I/O事件","chapter":"912"},{"id":140520,"title":"21 | poll：另一种I/O多路复用","chapter":"912"},{"id":141573,"title":"22 | 非阻塞I/O：提升性能的加速器","chapter":"912"},{"id":143245,"title":"23 | Linux利器：epoll的前世今生","chapter":"912"},{"id":143388,"title":"24 | C10K问题：高并发模型设计","chapter":"912"},{"id":143410,"title":"25 | 使用阻塞I/O和进程模型：最传统的方式","chapter":"912"},{"id":145464,"title":"26 | 使用阻塞I/O和线程模型：换一种轻量的方式","chapter":"912"},{"id":146664,"title":"27 | I/O多路复用遇上线程：使用poll单线程处理所有I/O事件","chapter":"912"},{"id":148148,"title":"28 | I/O多路复用进阶：子线程使用poll处理连接I/O事件","chapter":"912"},{"id":149204,"title":"29 | 渐入佳境：使用epoll和多线程模型","chapter":"912"},{"id":150780,"title":"30 | 真正的大杀器：异步I/O探索","chapter":"912"},{"id":152137,"title":"31丨性能篇答疑：epoll源码深度剖析","chapter":"912"},{"id":152668,"title":"32 | 自己动手写高性能HTTP服务器（一）：设计和思路","chapter":"1006"},{"id":154597,"title":"33 | 自己动手写高性能HTTP服务器（二）：I/O模型和多线程模型实现","chapter":"1006"},{"id":155273,"title":"34 | 自己动手写高性能HTTP服务器（三）：TCP字节流处理和HTTP协议实现","chapter":"1006"},{"id":156948,"title":"35 | 答疑：编写高性能网络编程框架时，都需要注意哪些问题？","chapter":"1006"},{"id":158003,"title":"结束语丨我相信这不是结束，让我们江湖再见","chapter":"1026"},{"id":239110,"title":"期末测试题丨有关网络编程的知识，你掌握了多少呢？","chapter":"1427"},{"id":111267,"title":"开篇词 | 学好网络编程，需要掌握哪些核心问题？","chapter":"803"},{"id":112010,"title":"01 | 追古溯源：TCP/IP和Linux是如何改变世界的？","chapter":"809"},{"id":112307,"title":"02 | 网络编程模型：认识客户端-服务器网络模型的基本概念","chapter":"809"},{"id":113607,"title":"03丨套接字和地址：像电话和电话号码一样理解它们","chapter":"809"},{"id":116042,"title":"04 | TCP三次握手：怎么使用套接字格式建立连接？","chapter":"809"},{"id":116043,"title":"05 | 使用套接字进行读写：开始交流吧","chapter":"809"},{"id":118122,"title":"06 | 嗨，别忘了UDP这个小兄弟","chapter":"809"},{"id":118721,"title":"07 | What? 还有本地套接字？","chapter":"809"},{"id":118990,"title":"08 | 工欲善其事必先利其器：学会使用各种工具","chapter":"809"},{"id":120390,"title":"09丨答疑篇：学习网络编程前，需要准备哪些东西？","chapter":"809"},{"id":125806,"title":"10 | TIME_WAIT：隐藏在细节下的魔鬼","chapter":"852"},{"id":126126,"title":"11 | 优雅地关闭还是粗暴地关闭 ?","chapter":"852"},{"id":127900,"title":"12 | 连接无效：使用Keep-Alive还是应用心跳来检测？","chapter":"852"},{"id":128609,"title":"13 | 小数据包应对之策：理解TCP协议中的动态数据传输","chapter":"852"},{"id":129807,"title":"14丨UDP也可以是“已连接”？","chapter":"852"},{"id":131670,"title":"15 | 怎么老是出现“地址已经被使用”？","chapter":"852"},{"id":132443,"title":"16 | 如何理解TCP的“流”？","chapter":"852"},{"id":132639,"title":"17 | TCP并不总是“可靠”的？","chapter":"852"},{"id":134606,"title":"18 | 防人之心不可无：检查数据的有效性","chapter":"852"},{"id":135735,"title":"19丨提高篇答疑：如何理解TCP四次挥手？","chapter":"852"},{"id":136549,"title":"期中大作业丨动手编写一个自己的程序吧！","chapter":"899"},{"id":138405,"title":"期中大作业丨题目以及解答剖析","chapter":"899"},{"id":138948,"title":"20 | 大名⿍⿍的select：看我如何同时感知多个I/O事件","chapter":"912"},{"id":140520,"title":"21 | poll：另一种I/O多路复用","chapter":"912"},{"id":141573,"title":"22 | 非阻塞I/O：提升性能的加速器","chapter":"912"},{"id":143245,"title":"23 | Linux利器：epoll的前世今生","chapter":"912"},{"id":143388,"title":"24 | C10K问题：高并发模型设计","chapter":"912"},{"id":143410,"title":"25 | 使用阻塞I/O和进程模型：最传统的方式","chapter":"912"},{"id":145464,"title":"26 | 使用阻塞I/O和线程模型：换一种轻量的方式","chapter":"912"},{"id":146664,"title":"27 | I/O多路复用遇上线程：使用poll单线程处理所有I/O事件","chapter":"912"},{"id":148148,"title":"28 | I/O多路复用进阶：子线程使用poll处理连接I/O事件","chapter":"912"},{"id":149204,"title":"29 | 渐入佳境：使用epoll和多线程模型","chapter":"912"},{"id":150780,"title":"30 | 真正的大杀器：异步I/O探索","chapter":"912"},{"id":152137,"title":"31丨性能篇答疑：epoll源码深度剖析","chapter":"912"},{"id":152668,"title":"32 | 自己动手写高性能HTTP服务器（一）：设计和思路","chapter":"1006"},{"id":154597,"title":"33 | 自己动手写高性能HTTP服务器（二）：I/O模型和多线程模型实现","chapter":"1006"},{"id":155273,"title":"34 | 自己动手写高性能HTTP服务器（三）：TCP字节流处理和HTTP协议实现","chapter":"1006"},{"id":156948,"title":"35 | 答疑：编写高性能网络编程框架时，都需要注意哪些问题？","chapter":"1006"},{"id":158003,"title":"结束语丨我相信这不是结束，让我们江湖再见","chapter":"1026"},{"id":239110,"title":"期末测试题丨有关网络编程的知识，你掌握了多少呢？","chapter":"1427"}]}