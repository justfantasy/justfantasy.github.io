[{"title":"将hexo博客从github和coding迁移至自己买的腾讯云服务器","date":"2019-02-13T01:52:00.000Z","path":"2019/02/13/hexo-to-own-server/","text":"本来博客部署在coding上的，经常访问速度超级慢。索性就研究了一下怎么部署到自己买的云服务器上。 我买的是腾讯云的服务器。网上其实有蛮多教程的。我这里还是做了一次整理。 在服务器上安装git1yum install -y git 创建git用户1234adduser gitpasswd gitchmod 740 /etc/sudoersvim /etc/sudoers 找到以下内容 1root ALL&#x3D;(ALL) ALL 在它后面添加一行 1git ALL&#x3D;(ALL) ALL 保存并退出，将权限修改回来 1chmod 400 &#x2F;etc&#x2F;sudoers 配置密钥在windows本地的git bash中创建密钥（如果已经设置好环境变量，直接在cmd命令行执行即可） 1ssh-keygen -t rsa 一路回车即可 回到云服务器。切换至 git 用户，创建 .ssh 文件夹以及 authorized_keys 文件并将本地的 id_rsa.pub 文件内容粘贴到里面。 123su gitmkdir ~&#x2F;.sshvim ~&#x2F;.ssh&#x2F;authorized_keys 修改权限 123cd ~chmod 600 .ssh&#x2F;authorzied_keyschmod 700 .ssh 配置nginx（省略） 自动化部署建立git仓库 123su rootcd &#x2F;home&#x2F;git&#x2F;repo # 在 git 用户目录下创建git init --bare blog.git 修改目录所有者 1chown git:git -R blog.git 使用git-hooks同步网站目录 12cd &#x2F;home&#x2F;git&#x2F;repovim blog.git&#x2F;hooks&#x2F;post-receive 写入内容【这里要考虑权限问题，git用户是否有权限向web目录/www/wwwroot/hexo下创建新的文件，可以使用git用户进行测试】 12#!&#x2F;bin&#x2F;shgit --work-tree&#x3D;&#x2F;www&#x2F;wwwroot&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;repo&#x2F;blog.git checkout -f 保存后赋予可执行权限 1chmod +x &#x2F;home&#x2F;git&#x2F;repo&#x2F;blog.git&#x2F;hooks&#x2F;post-receive 本地配置hexo 根目录下的 _config.yml 文件，找到 deploy。 1234567deploy: type: git repo: #github: https:&#x2F;&#x2F;github.com&#x2F;xxxx&#x2F;xxx.github.io.git #coding: https:&#x2F;&#x2F;git.coding.net&#x2F;xxx&#x2F;xxx.git server: git@100.1.1.100:&#x2F;home&#x2F;git&#x2F;repo&#x2F;blog.git branch: master 执行部署命令即可1hexo g -d","tags":[{"name":"笔记","slug":"笔记","permalink":"https://justfantasy.cn/tags/%E7%AC%94%E8%AE%B0/"},{"name":"hexo","slug":"hexo","permalink":"https://justfantasy.cn/tags/hexo/"}]},{"title":"安卓手机微信浏览器ajax请求返回慢的问题","date":"2019-01-03T07:54:00.000Z","path":"2019/01/03/android-wechat-ajax/","text":"做一个很简单的投票功能。需要微信隐式授权。发现安卓手机都有一个问题：点击投票成功之后，需要等待两秒才会弹出成功的提示（偶尔出现）开始以为是php返回慢，但是功能这么简单，数据库都没用到，用的是redis，不应该呀。发现苹果手机没有任何问题。于是考虑是不是服务器哪里的设置有问题。测试一下，发现开发、测试、线上都存在问题。于是明白跟服务器也没有一毛钱关系。。。 于是在本地测试。发现后端其实已经很快的返回200的状态了，只是前端弹出提示有延迟。。。现在用的是jquery的ajax，于是想着是不是ajax的问题，又换成axios，没有解决。。。 然后思考着是不是微信的问题？然后用浏览器打开，果然OK好了，定位问题是安卓的微信浏览器的问题。难道微信浏览器还做了什么处理吗？ 想不出来原因，看到ajax有一个async的参数：是否异步请求，默认是true。 名词解释：async. 默认是true，即为异步方式，$.Ajax执行后，会继续执行ajax后面的脚本，直到服务器端返回数据后，触发$.Ajax里的success方法，这时候执行的是两个线程。若要将其设置为false，则所有的请求均为同步请求，在没有返回值之前，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。 怎么看都感觉不出来对代码的影响。不过还是尝试着将async改成了false。然后。。。就可以了。。。","tags":[{"name":"javascript","slug":"javascript","permalink":"https://justfantasy.cn/tags/javascript/"}]},{"title":"时间复杂度和大O表示法（笔记）","date":"2018-11-30T09:36:00.000Z","path":"2018/11/30/time-complexity-and-large-o-representation/","text":"大O表示法1232 O(1) 一个常数，复杂度固定不变2n+10 O(n) 随着n的变化而变化，复杂度由n决定5n^2 O(n^2) 随着n^2的变化而变化，复杂度由n^2决定 常用的时间复杂度 ** O(1) ** 常量时间：给定一个大小为n的输入，该算法只需要一步就可以完成任务。 ** O(log n) ** 对数时间：给定大小为n的输入，该算法每执行一步，它完成任务所需要的步骤数目会以一定的因子减少。 ** O(n) ** 线性时间：给定大小为n的输入，该算法完成任务所需要的步骤直接和n相关（1对1的关系）。 ** O(n²) ** 二次方时间：给定大小为n的输入，完成任务所需要的步骤是n的平方。 ** O(C^n) ** 指数时间：给定大小为n的输入，完成任务所需要的步骤是一个常数的n次方（非常大的数字）。 每一个复杂度完成任务所需要的步骤数123456let n = 16;O(1) = 1 step;O(log n) = 4 steps;O(n) = 16 steps;O(n^2) = 256 steps;O(2^n) = 65535 steps; 代码示例数据结构12345678const friends = &#123; 'Mark': true, 'Amy': true, 'Carl': false, 'Ray': true, 'Laura': false&#125;;const sortedAges = [22, 24, 27, 29, 31]; O(1) 常量时间1234function isFriend(name) &#123; return friends[name];&#125;isFriend('Mark'); //Return true 一步操作即可获取到所要结果 O(log n) 对数时间123456789101112131415161718192021222324function thisOld(num, arr) &#123; const len = arr.length, mid = Math.floor(len/2); if (arr[mid] === num) return true; // 只需要在大于mid的值中搜索即可 if (num &gt; mid) &#123; for (let i = mid + 1, i &lt; len; i++) &#123; if (arr[i] === num) return true; &#125; return false; &#125; // 只需要在小于mid的值中搜索即可 if (num &lt; mid) &#123; for (let i = mid - 1, i &gt; 0; i--) &#123; if (arr[i] === num) return true; &#125; return false; &#125;&#125;thisOld(29, sortedAges); //return true; O(n) 线性时间1234567891011function addAges(arr) &#123; let sum = 0; const len = arr.length; for (let i = 0; i &lt; len; i++) &#123; sum += arr[i]; &#125; return sum;&#125;addAges(sortedAges); //133 O(n²) 二次方时间1234567891011121314function addedAges(arr) &#123; let addedAge = []; const len = arr.length; for (let i = 0; i &lt; len; i++) &#123; for (let j = i + 1; j &lt; len; j++) &#123; addedAge.push(arr[i] + arr[j]); &#125; &#125; return addedAge;&#125;addedAges(sortedAges); //[46, 49, 51, 53, 51, 53, 55, 56, 58, 60] O(2^n) 指数时间1//尝试找出长度为n的密码中所以字符的组合 参考文档白话算法：时间复杂度和大O表示法","tags":[{"name":"javascript","slug":"javascript","permalink":"https://justfantasy.cn/tags/javascript/"},{"name":"数据结构和算法","slug":"数据结构和算法","permalink":"https://justfantasy.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"}]},{"title":"freeCodeCamp - Caesars Cipher - 凯撒密码","date":"2018-11-05T01:04:00.000Z","path":"2018/11/05/freecodecamp-caesars-cipher/","text":"凯撒密码 （让上帝的归上帝，凯撒的归凯撒） 下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。 移位密码也就是密码中的字母会按照指定的数量来做移位。 一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。 写一个ROT13函数，实现输入加密字符串，输出解密字符串。 所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。 当你完成不了挑战的时候，记得开大招’Read-Search-Ask’。 这是一些对你有帮助的资源: String.charCodeAt()String.fromCharCode() 1234567891011121314151617181920212223242526272829303132333435363738function rot13(str) &#123; // LBH QVQ VG! var len = str.length, // 需要转换的密码长度 arr = [], // 转换之后的结果数组 from = 65, // A的ascii值，开始 move = 13, // 字母移动的位置 end = 90, // Z的ascii值，结束 mid = end - move; // 直接+13可以转换的最大的ascii值 //对每一个字母进行遍历 for (var i = 0; i &lt; len; i++) &#123; //转为ascii值 var code = str.charCodeAt(i); //增加移动值之后最大只会到Z[90] if (code &gt;= from &amp;&amp; code &lt;= mid) &#123; code += move; &#125; //增加移动值之后最大超出Z值，又从A[65]开始增加 else if (code &gt; mid &amp;&amp; code &lt;= end) &#123; code = from + (move - (end - code) - 1); &#125; arr.push(code); &#125; //String.fromCharCode()方法用于将ascii值转为对应的字符 //console.log(String.fromCharCode(72,82,73,73,32,75,79,74,73,32,75,77,65,80)); // es5写法，将数组应用到方法中作为参数使用 return String.fromCharCode.apply(null, arr); //es6写法 //return String.fromCharCode(...arr);&#125;rot13(\"SERR PBQR PNZC\"); // 你可以修改这一行来测试你的代码","tags":[{"name":"javascript","slug":"javascript","permalink":"https://justfantasy.cn/tags/javascript/"}]},{"title":"sublime、vscode、webstorm通用html5快捷代码生成","date":"2018-10-26T02:09:00.000Z","path":"2018/10/26/create-html5-shortcut-key/","text":"后代： &gt; 123456&lt;!-- nav&gt;ul&gt;li --&gt;&lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; 兄弟：+ 123456&lt;!-- div+p+bq --&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt; &lt;blockquote&gt;&lt;/blockquote&gt;&lt;/div&gt; 上级：^ 12345678910111213&lt;!-- div+div&gt;p&gt;span+em^bq --&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt; &lt;blockquote&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;!-- div+div&gt;p&gt;span+em^^bq --&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;/blockquote&gt; 分组：() 123456789101112131415161718192021222324252627&lt;!-- div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p --&gt;&lt;div&gt; &lt;header&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"\"&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/header&gt; &lt;footer&gt; &lt;p&gt;&lt;/p&gt; &lt;/footer&gt;&lt;/div&gt;&lt;!-- (div&gt;dl&gt;(dt+dd)*3)+footer&gt;p --&gt;&lt;div&gt; &lt;dl&gt; &lt;dt&gt;&lt;/dt&gt; &lt;dd&gt;&lt;/dd&gt; &lt;dt&gt;&lt;/dt&gt; &lt;dd&gt;&lt;/dd&gt; &lt;dt&gt;&lt;/dt&gt; &lt;dd&gt;&lt;/dd&gt; &lt;/dl&gt;&lt;/div&gt;&lt;footer&gt; &lt;p&gt;&lt;/p&gt;&lt;/footer&gt; 乘法：* 12345678&lt;!-- ul&gt;li*5 --&gt;&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 自增符号：$ 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!-- ul&gt;li.item$*5 --&gt;&lt;ul&gt; &lt;li class=\"item1\"&gt;&lt;/li&gt; &lt;li class=\"item2\"&gt;&lt;/li&gt; &lt;li class=\"item3\"&gt;&lt;/li&gt; &lt;li class=\"item4\"&gt;&lt;/li&gt; &lt;li class=\"item5\"&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- h$[title=item$]&#123;Header $&#125;*3 --&gt;&lt;h1 title=\"item1\"&gt;Header 1&lt;/h1&gt;&lt;h2 title=\"item2\"&gt;Header 2&lt;/h2&gt;&lt;h3 title=\"item3\"&gt;Header 3&lt;/h3&gt;&lt;!-- ul&gt;li.item$$$*5 --&gt;&lt;ul&gt; &lt;li class=\"item001\"&gt;&lt;/li&gt; &lt;li class=\"item002\"&gt;&lt;/li&gt; &lt;li class=\"item003\"&gt;&lt;/li&gt; &lt;li class=\"item004\"&gt;&lt;/li&gt; &lt;li class=\"item005\"&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- ul&gt;li.item$@-*5 --&gt;&lt;ul&gt; &lt;li class=\"item5\"&gt;&lt;/li&gt; &lt;li class=\"item4\"&gt;&lt;/li&gt; &lt;li class=\"item3\"&gt;&lt;/li&gt; &lt;li class=\"item2\"&gt;&lt;/li&gt; &lt;li class=\"item1\"&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- ul&gt;li.item$@3*5 --&gt;&lt;ul&gt; &lt;li class=\"item3\"&gt;&lt;/li&gt; &lt;li class=\"item4\"&gt;&lt;/li&gt; &lt;li class=\"item5\"&gt;&lt;/li&gt; &lt;li class=\"item6\"&gt;&lt;/li&gt; &lt;li class=\"item7\"&gt;&lt;/li&gt;&lt;/ul&gt; ID和类属性 1234567891011&lt;!-- #header --&gt;&lt;div id=\"header\"&gt;&lt;/div&gt;&lt;!-- .title --&gt;&lt;div class=\"title\"&gt;&lt;/div&gt;&lt;!-- orm#search.wide --&gt;&lt;form id=\"search\" class=\"wide\"&gt;&lt;/form&gt;&lt;!-- p.class1.class2.class3 --&gt;&lt;p class=\"class1 class2 class3\"&gt;&lt;/p&gt; 自定义属性 12345678&lt;!-- p[title=\"Hello world\"] --&gt;&lt;p title=\"Hello world\"&gt;&lt;/p&gt;&lt;!-- td[rowspan=2 colspan=3 title] --&gt;&lt;td rowspan=\"2\" colspan=\"3\" title=\"\"&gt;&lt;/td&gt;&lt;!-- [a='value1' b=\"value2\"] --&gt;&lt;div a=\"value1\" b=\"value2\"&gt;&lt;/div&gt; 文本：{} 12345678&lt;!-- a&#123;Click me&#125; --&gt;&lt;a href=\"\"&gt;Click me&lt;/a&gt;&lt;!-- p&gt;&#123;Click &#125;+a&#123;here&#125;+&#123; to continue&#125; --&gt;&lt;p&gt;Click &lt;a href=\"\"&gt;here&lt;/a&gt; to continue&lt;/p&gt;&lt;!-- [a='value1' b=\"value2\"] --&gt;&lt;div a=\"value1\" b=\"value2\"&gt;&lt;/div&gt; 隐式标签（只写了类名，标签名自动生成） 1234567891011121314151617&lt;!-- .class --&gt;&lt;div class=\"class\"&gt;&lt;/div&gt;&lt;!-- em&gt;.class --&gt;&lt;em&gt;&lt;span class=\"class\"&gt;&lt;/span&gt;&lt;/em&gt;&lt;!-- ul&gt;.class --&gt;&lt;ul&gt; &lt;li class=\"class\"&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- table&gt;.row&gt;.col --&gt;&lt;table&gt; &lt;tr class=\"row\"&gt; &lt;td class=\"col\"&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 常用HTML 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127&lt;!-- ! --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt;&lt;!-- a --&gt;&lt;a href=\"\"&gt;&lt;/a&gt;&lt;!-- a:link --&gt;&lt;a href=\"http://\"&gt;&lt;/a&gt;&lt;!-- br --&gt;&lt;br&gt;&lt;!-- hr --&gt;&lt;hr&gt;&lt;!-- link --&gt;&lt;link rel=\"stylesheet\" href=\"\" /&gt;&lt;!-- link:css --&gt;&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;&lt;!-- link:favicon --&gt;&lt;link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" /&gt;&lt;!-- link:touch --&gt;&lt;link rel=\"apple-touch-icon\" href=\"favicon.png\" /&gt;&lt;!-- link:rss --&gt;&lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"rss.xml\" /&gt;&lt;!-- link:atom --&gt;&lt;link rel=\"alternate\" type=\"application/atom+xml\" title=\"Atom\" href=\"atom.xml\" /&gt;&lt;!-- meta --&gt;&lt;meta&gt;&lt;!-- meta:utf --&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"&gt;&lt;!-- meta:vp --&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;&lt;!-- meta:edge --&gt;&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;&lt;!-- style --&gt;&lt;style&gt;&lt;/style&gt;&lt;!-- script --&gt;&lt;script&gt;&lt;/script&gt;&lt;!-- script:src --&gt;&lt;script src=\"\"&gt;&lt;/script&gt;&lt;!-- img --&gt;&lt;img src=\"\" alt=\"\" /&gt;&lt;!-- iframe --&gt;&lt;iframe src=\"\" frameborder=\"0\"&gt;&lt;/iframe&gt;&lt;!-- form --&gt;&lt;form action=\"\"&gt;&lt;/form&gt;&lt;!-- form:get --&gt;&lt;form action=\"\" method=\"get\"&gt;&lt;/form&gt;&lt;!-- form:post --&gt;&lt;form action=\"\" method=\"post\"&gt;&lt;/form&gt;&lt;!-- label --&gt;&lt;label for=\"\"&gt;&lt;/label&gt;&lt;!-- input --&gt;&lt;input type=\"text\"&gt;&lt;!-- label --&gt;&lt;label for=\"\"&gt;&lt;/label&gt;&lt;!-- inp | input:t | input:text --&gt;&lt;input type=\"text\" name=\"\" id=\"\"&gt;&lt;!-- input:h | input:hidden | input[type=hidden name] --&gt;&lt;input type=\"hidden\" name=\"\"&gt;&lt;!-- input:search | inp[type=search] --&gt;&lt;input type=\"search\" name=\"\" id=\"\"&gt;&lt;!-- input:email | inp[type=email] --&gt;&lt;input type=\"email\" name=\"\" id=\"\"&gt;&lt;!-- input:url | inp[type=url] --&gt;&lt;input type=\"url\" name=\"\" id=\"\" /&gt;&lt;!-- input:p | input:password | inp[type=password] --&gt;&lt;input type=\"password\" name=\"\" id=\"\"&gt;&lt;!-- input:c | input:checkbox | inp[type=checkbox] --&gt;&lt;input type=\"checkbox\" name=\"\" id=\"\"&gt;&lt;!-- input:r | input:radio | inp[type=radio] --&gt;&lt;input type=\"radio\" name=\"\" id=\"\"&gt;&lt;!-- input:f | input:file | inp[type=file] --&gt;&lt;input type=\"file\" name=\"\" id=\"\"&gt;&lt;!-- input:s | input:submit | inp[type=submit] --&gt;&lt;input type=\"submit\" value=\"\"&gt;&lt;!-- btn | button --&gt;&lt;button&gt;&lt;/button&gt;&lt;!-- btn:b | button[type=button] --&gt;&lt;button type=\"button\"&gt;&lt;/button&gt;&lt;!-- btn:s | button[type=submit] --&gt;&lt;button type=\"submit\"&gt;&lt;/button&gt;","tags":[{"name":"html/css","slug":"html-css","permalink":"https://justfantasy.cn/tags/html-css/"},{"name":"开发工具","slug":"开发工具","permalink":"https://justfantasy.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}]},{"title":"PS切图技巧流程笔记","date":"2018-10-19T02:03:00.000Z","path":"2018/10/19/ps-cut-image/","text":"我要成为一名切图仔:) 最近看一些视频教程，记录一下用PS切图的一些技巧流程。感觉挺实用的。主要不记下来，转背就忘了… 编辑 - 首选项 - 增效工具 - 启用生成器 - 勾选 - 重启 文件 - 生成图像资源 - 勾选 选定对应需要切的图片 - 修改名称为对应后缀 - 示例：1.png/1.jpg 在psd对应的文件夹下即可找到切好的图片 选框工具 - 选定图片 - 图像 - 裁剪 - 文件 - 导出 - [快速导出png/导出为指定格式] - 切图完成 移动工具 - ctrl + 鼠标选定图层 - 右侧工具栏 - ctrl+鼠标选定图层 - 右键转为智能对象 - 选框工具 - 框选住图层（不需要跟图层一样大小） - ctrl + c - ctrl + n - 创建 - ctrl + v - 导出为指定格式即可 将多张图拼在一起[雪碧图] - 执行3 - 图像 - 画布大小 - 选定方向 - 需要延伸的画布大小（高或者宽 - 根据选定的方向来） - 选定第二张需要导出的图片 - 拖动图层到画布上的指定位置 - 导出","tags":[{"name":"html/css","slug":"html-css","permalink":"https://justfantasy.cn/tags/html-css/"}]},{"title":"暗恋","date":"2018-10-11T13:37:00.000Z","path":"2018/10/11/secret-love/","text":"暗 恋 毕业后多年，她收到了他的结婚请柬。犹豫再三，她还是决定去赴约。 他变得风度翩翩，十分健谈。他的新娘也很美丽，让她心里一阵伤感。 如果当年自己没有离开，那么站在他身旁的是不是就是自己？ 虽然心里很不是滋味，她还是要走过去给他送去祝福。 “这么多年没见，你变了好多，记得那时你没这么健谈，跟喜欢的人说话总是结巴，好腼腆。” 她顿了顿，继续说， “没想到现在跟新娘说话这么流利，爱情的力量真厉害！” 他听后，马上脸红到脖子根，说： “真……真……真的吗？” 她突然就泪流满面，不能自已…… 两个人或许都还爱着对方，只是就是缺少点什么，所以才没办法在一起。说到底，没有缘分…","tags":[{"name":"小小说","slug":"小小说","permalink":"https://justfantasy.cn/tags/%E5%B0%8F%E5%B0%8F%E8%AF%B4/"}]},{"title":"composer实现自动加载","date":"2018-09-28T01:30:00.000Z","path":"2018/09/28/php-composer-autoload/","text":"1.创建项目目录[project] 2.在目录下新建composer.json文件 123&#123;&#125; 3.打开控制台，进入项目目录，执行composer命令： 1composer install 4.运行后生成composer文件目录，目录结构如下： [project] 1234567891011121314151617181920212223- Vendor - composer - autoload_classmap.php - autoload_namespaces.php - autoload_psr4.php - autoload_real.php - autoload_static.php ClassLoader.php installed.json LICENSE - autoload.php- composer.json 5.在composer.json文件中新增代码 12345678&#123; &quot;autoload&quot;: &#123; &quot;psr-4&quot;: &#123; &quot;DesignPatterns\\\\&quot; : &quot;DesignPatterns&quot; &#125; &#125;&#125;# DesignPatterns\\\\代表命名空间，DesignPatterns代表目录名称，两个名称可不一样 6.新建目录DesignPatterns，创建php文件 1234567891011121314151617&lt;?phpnamespace DesignPatterns\\Structural\\Decorator;class ExtraBed extends BookingDecorator&#123; private const PRICE = 30; public function calculatePrice(): int &#123; return $this-&gt;booking-&gt;calculatePrice() + self::PRICE; &#125; public function getDescription(): string &#123; return $this-&gt;booking-&gt;getDescription() . ' with extra bed'; &#125;&#125; 7.在项目下创建目录web，新建入口文件index.php 1234567891011&lt;?phpuse DesignPatterns\\Structural\\Decorator\\DoubleRoomBooking;use DesignPatterns\\Structural\\Decorator\\WiFi;use DesignPatterns\\Structural\\Decorator\\ExtraBed;require '../vendor/autoload.php'; //引入自动加载文件$booking = new DoubleRoomBooking();echo $booking-&gt;calculatePrice();echo '&lt;br&gt;';echo $booking-&gt;getDescription(); 8.执行composer命令，使修改后的comoser文件生效 1composer dump-autoload","tags":[{"name":"php","slug":"php","permalink":"https://justfantasy.cn/tags/php/"}]},{"title":"借蜡烛","date":"2018-09-28T01:30:00.000Z","path":"2018/09/28/borrow-a-candle/","text":"一单身女子搬了家，晚上忽然停电，她赶紧点起了蜡烛。忽听有人敲门。 原来是隔壁的小孩子，只见他紧张地问：阿姨,你家有蜡烛吗？女子想:天哪，刚来就借东西,以后就更没完没了了.于是她冷冰冰地说：”没有！”小孩笑了，还带着一丝得意：“我就知道你家没有！妈妈怕你害怕,让我给你送蜡烛来了” 人性本善，只是因为一些老鼠屎，才让越来越多的人，人人自危。不过，不管怎么样，人都要学会保护自己。在陌生人面前还是得防着一手。哎，其实就算亲戚朋友面前，又何尝不是呢。又有多少可以敞开心扉的朋友？社会太浮躁，只要有利益的东西，就总是会产生矛盾，产生纠纷。往前走，不迷茫","tags":[{"name":"小小说","slug":"小小说","permalink":"https://justfantasy.cn/tags/%E5%B0%8F%E5%B0%8F%E8%AF%B4/"}]},{"title":"laravel5.5项目初始构建","date":"2018-01-04T08:43:00.000Z","path":"2018/01/04/learn-laravel5.5-start/","text":"开发环境系统：winows8php版本：php7.1IDE：phpstormlaravel版本：5.5 laragon集成环境的安装请参考：laragon集成环境的安装 使用laravel-admin包方便后台开发参考文档：laravel-admin中文文档1.安装依赖 1composer require encore&#x2F;laravel-admin &quot;1.5.*&quot; 2.发布资源 1php artisan vendor:publish --provider&#x3D;&quot;Encore\\Admin\\AdminServiceProvider&quot; 3.完成安装 1php artisan admin:install laravel5在phpstorm内的代码提示工具请参考：为PhpStorm添加Laravel 代码智能提示功能","tags":[{"name":"php","slug":"php","permalink":"https://justfantasy.cn/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"https://justfantasy.cn/tags/laravel/"}]},{"title":"Windows下使用Sublime Text 3调试/运行 C/C++ 程序","date":"2017-10-11T09:36:00.000Z","path":"2017/10/11/windows-sublime-c-execute/","text":"本来想着在虚拟机开发的，不过电脑卡到爆。还是想办法在win下面弄个开发环境。 试了半天，找到一个教程。完全按照教程走，编译执行都OKWindows下使用Sublime Text 3调试/运行 C/C++ 程序 记录一下，下次要用到的时候就不用到处找了。","tags":[{"name":"开发工具","slug":"开发工具","permalink":"https://justfantasy.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}]},{"title":"关于PHP程序员技术职业生涯规划的感想","date":"2017-10-11T04:35:00.000Z","path":"2017/10/11/php-career-planning/","text":"今天在网络上翻资料，看到韩天峰(Rango)的博客的一篇关于PHP程序员技术职业生涯规划的文章。我觉得对于现在迷茫的我来说，是很有帮助的。我觉得这么多年来技术没什么进步的原因，一部分是因为自己不够努力，还有就是基础不够扎实。 韩天峰推荐的几本书： 计算机基础篇1.深入理解计算机系统2.现代操作系统.3.C程序设计语言4.C语言数据结构和算法5.Unix环境高级编程6.TCP/IP网络通信详解 面向对象篇1.Java面向对象编程2.Java编程思想3.J2EE PHP基础篇PHP5权威编程 另外不光要读，还要照着书中的讲解动手去编程实践。","tags":[{"name":"php","slug":"php","permalink":"https://justfantasy.cn/tags/php/"},{"name":"职业规划","slug":"职业规划","permalink":"https://justfantasy.cn/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"}]},{"title":"python3爬虫学习笔记之模拟淘宝登录","date":"2017-03-15T09:18:00.000Z","path":"2017/03/15/learn-python3-taobao-login/","text":"准备工作使用chrome f12调试模式，抓包查看淘宝登录的整个流程，并查看post请求的数据值得注意的是，淘宝用的是gbk编码 说明此版本没有处理验证码，只是单纯的登录具体的流程和实现都在代码注释中 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185#!/usr/bin/env python# -*- coding: utf-8 -*-# 此项目主要参考链接【http://cuiqingcai.com/1076.html，感谢作者的分享__author__ = 'JustFantasy'import urllib.request, urllib.parse, urllib.errorimport http.cookiejarimport re# 模拟登录淘宝类# 登录淘宝流程# 1、请求地址https://login.taobao.com/member/login.jhtml获取到token# 2、请求地址https://passport.alibaba.com/mini_apply_st.js?site=0&amp;token=1L1nkdyfEDIA44Hw1FSDcnA&amp;callback=callback 通过token换取st# 3、请求地址https://login.taobao.com/member/vst.htm?st=&#123;st&#125;实现登录class Taobao: # 初始化方法 def __init__(self): # 登录的URL，获取token self.request_url = 'https://login.taobao.com/member/login.jhtml' # 通过st实现登录的URL self.st_url = 'https://login.taobao.com/member/vst.htm?st=&#123;st&#125;' # 用户中心地址 self.user_url = 'https://i.taobao.com/my_taobao.htm' # 代理IP地址，防止自己的IP被封禁 self.proxy_ip = 'http://120.193.146.97:843' # 登录POST数据时发送的头部信息 self.request_headers = &#123; 'Host':'login.taobao.com', 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0', 'Referer' : 'https://login.taobao.com/member/login.jhtml', 'Content-Type': 'application/x-www-form-urlencoded', 'Connection' : 'Keep-Alive' &#125; # 用户名 self.username = 'xxx@xxx.com' # ua字符串，经过淘宝ua算法计算得出，包含了时间戳,浏览器,屏幕分辨率,随机数,鼠标移动,鼠标点击,其实还有键盘输入记录,鼠标移动的记录、点击的记录等等的信息 self.ua = '089#6o5vOJvX+p/vyJ+evvvvv964Zx59o/eBpRDo3gsRlVypemTq+lp56psnhm5sL5/TvRMoZ//llHppexSA/99V6N9d3uCs5+K+v+7akvvvyFmNxoT5G0y/ZdMM6m0mGJlo3kJi5J5vR/EKvvvwb9ghRluiJwlHYHN43dhi+x5rYx0kvlvesIJvvxprxNge+hXxpxKzcV8iKq05ZuT03LK+v+7akvvvyFbFxoT5G0y/ZdMM6m0mGJlo3kJi5J5vR/EKvvvwDhjhRluiJwlHYHN43dhi+x5rYx0Vvlv5CtGNMx8+v+uMO/p9uE2COPovypleYeYY+8KOYBJ+v+24FVhTZxriDpLjmSNDWm8AHc7PEBUsV+QPdu8+v+uMX/p9kLpCOPovZ5ZhYK7goZKOYoK+v+paZNvvy/oCxoT5GXSR6V0wYV/zGJkDvlv62X0xkt96vJ3GZv5vaVNMkud3Breg/VynptGv2p22kFpOhIxbKNMiEpJVvlv5CtGNMYv+vvLasgQ1nG7xyYN+vveBZ6C4Q7NTvlv0vvVKd+kpyxlvvKgK96/PiJvvmNJ/7uLMvvVhV+kp35lvvKgK96/jscv+v1pFSd/wMWE5lVlbVHkBypEe3sElZuQA/pUrRTM49uspFuplpn4BypEe3sE36zDIFvg7l5v2Sm+usv6lO9QoSIsv6v5QKoDb9l6d/R6a7LJVEmjl/x5wz791bs2c6LVQ+lKs19IVSHr1/meeV4YPy+/V879d5W/I9l6d/Qv+7LDvln7KVmI87NJ68wDFK6lQaJ5spRJlXLvV+Qpusk5SZ7lpepvF/oVQ+l6Lv5TQZXgpv46s85QQRvKRy97t5XglvJpTKv5BR68Rlx27ukTl7J/x5HKsKsOpvNenposw7eeu+ula5HvOM/s56wlbZsQBFwDG/v2Gcmpk/uJQsHJI9pwp37L+ZoQBFwDjup+GMz95FuM5pHDIa95+csIQ3+O/+NpmQoI27oDaa4+3875oKPSxDsDeWuQw97gdpL7SSmLp9dpvlV4fZ9y5v7+0pWRPs5vTvs8m9ojpv46l8TbQRv6fhL+lZuQA/pUrRTM45689vL9gFlYPc7Uky7TY8zDI9l6d/QKsSulpv46s8vRQ9N+Vb/JYhsdFVv7mpoDJ7+8bvs9/O+VX5vK9epy9KkIHp+p7/+Eu5689v45vks8Hzo/V879Jse88vJ8IQFMkzovV+QlJvuZ87Jev34pyYsVQ+lZuKL5L92/x+4EF9aQp77Z9yvDuK+X0vlvclvVxCdouvJKEQnkGvlvRrGGorJLYnJ5v+RyBvlQDvlv62X09kjS6vJhSnv5vVOOXa5AOklKxxeN+vv44XdwY8TTVvHfDvlv62X04kTL6vJyy3v5vR4eEVSHChn2oQ9qrPv6LYNu+ABESRI0W+DRtvJ5v+cGqMcvfvlv/tY79sQf7WfSglx+xxHd61ZuVRdMVvlv5CtGNMx8+v+uMO/p9es6COPovZ5ZhYK7goZKOYNK+vvkqCtVNyJ5v93o2s/pYv4Uz15vNlNg0dFB5NL0zyJ5v93H2s/pYvRUz15vwp+T2T009JL0z3v5vR4eDRGljhn2oQK32P+oAydtKAFEPhw5K9Wb6vJ5v+cGqMcvkvlvesIJvvxpBWNge+hXxpxKzcV8iKq05ZuT03JK+vvkqCtVN5J5vR/EKvvvwDtghRluiJwlHYHN43dhi+x5rYx0kvlvesIJvvxpIZlge+hXxpxKzcV8iKq05ZuT03LK+v+7akvvvyFEPxoT5G0y/ZdMM6m0mGJlo3kJi5J5vR/EKvvvwEdghRluiJwlHYHN43dhi+x5rYx0kvlvesIJvvxpt8vge+hXxpxKzcV8iKq05ZuT03mJ+v+24FWuTUBriDpdpXUNV8kT5AM/n1oSYRNF+AN==' # 密码，在这里不能输入真实密码，淘宝对此密码进行了加密处理，256位，此处为加密后的密码 self.password2 = '98d8979ad859f27838ba5aa299217fb4edf7b46f052c1330bf9fe57d594a09e5ee9402fc9bb86d83d9c0d5b50b13e93a8679e2699a17a87993d435e25ac81b01c74d68a3eb6460b0a1e05068d337567be980911e0dcaa6ef2b8141aeb21cf547c8a77c2aa9ff6ea724e6f2df838c3680cf56ba8e0484da15051bdd27eaee5a20' self.post = &#123; 'ua': self.ua, 'TPL_checkcode': '', 'CtrlVersion': '1,0,0,7', 'TPL_password': '', 'TPL_redirect_url': 'http://i.taobao.com/my_taobao.htm', 'TPL_username': self.username, 'loginsite': '0', 'newlogin': '0', 'from': 'tb', 'fc': 'default', 'style': 'default', 'css_style': '', 'tid': 'XOR_1_000000000000000000000000000000_625C4720470A0A050976770A', 'support': '000001', 'loginType': '4', 'minititle': '', 'minipara': '', 'umto': 'NaN', 'pstrong': '3', 'llnick': '', 'sign': '', 'need_sign': '', 'isIgnore': '', 'full_redirect': '', 'popid': '', 'callback': '', 'guf': '', 'not_duplite_str': '', 'need_user_id': '', 'poy': '', 'gvfdcname': '10', 'gvfdcre': '', 'from_encoding ': '', 'sub': '', 'TPL_password_2': self.password2, 'loginASR': '1', 'loginASRSuc': '1', 'allp': '', 'oslanguage': 'zh-CN', 'sr': '1366*768', 'osVer': 'windows|6.1', 'naviVer': 'firefox|35' &#125; # 将POST的数据进行编码转换 self.post_data = urllib.parse.urlencode(self.post).encode(encoding='GBK') # 设置代理 self.proxy = urllib.request.ProxyHandler(&#123;'http': self.proxy_ip&#125;) # 设置cookie self.cookie = http.cookiejar.LWPCookieJar() # 设置cookie处理器 self.cookieHandler = urllib.request.HTTPCookieProcessor(self.cookie) # 设置登录时用到的opener，它的open方法相当于urllib2.urlopen self.opener = urllib.request.build_opener(self.cookieHandler, self.proxy, urllib.request.HTTPHandler) # 赋值J_HToken self.J_HToken = '' # 登录成功时，需要的Cookie self.newCookie = http.cookiejar.CookieJar() # 登陆成功时，需要的一个新的opener self.newOpener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(self.newCookie)) # 利用st码进行登录 # 这一步我是参考的崔庆才的个人博客的教程，因为抓包的时候并没有抓取到这个url # 但是如果不走这一步，登录又无法成功 # 区别是并不需要传递user_name字段，只需要st就可以了 def login_by_st(self, st): st_url = self.st_url.format(st=st) headers = &#123; 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0', 'Host':'login.taobao.com', 'Connection' : 'Keep-Alive' &#125; request = urllib.request.Request(st_url, headers=headers) response = self.newOpener.open(request) content = response.read().decode('gbk') #检测结果，看是否登录成功 pattern = re.compile('top.location.href = \"(.*?)\"', re.S) match = re.search(pattern, content) print(match) if match: print(u'登录网址成功') return True else: print(u'登录失败') return False # 程序运行主干 def main(self): try: # 请求登录地址， 此时返回的页面中有两个js的引入 # 位置是页面的前两个JS的引入，其中都带有token参数 request = urllib.request.Request(self.request_url, self.post_data, self.request_headers) response = self.opener.open(request) content = response.read().decode('gbk') # 抓取页面中的两个获取st的js pattern = re.compile('&lt;script src=\\\"(.*)\\\"&gt;&lt;\\/script&gt;') match = pattern.findall(content) # [ # 'https://passport.alibaba.com/mini_apply_st.js?site=0&amp;token=1f2f3ePAx5b-G8YbNIlDCFQ&amp;callback=callback', # 'https://passport.alipay.com/mini_apply_st.js?site=0&amp;token=1tbpdXJo6W1E4bgPCfOEiGw&amp;callback=callback', # 'https://g.alicdn.com/kissy/k/1.4.2/seed-min.js', # 'https://g.alicdn.com/vip/login/0.5.43/js/login/miser-reg.js?t=20160617' # ] # 其中第一个是我们需要请求的JS，它会返回我们需要的st #print(match) # 如果匹配到了则去获取st if match: # 此时可以看到有两个st， 一个alibaba的，一个alipay的，我们用alibaba的去实现登录 request = urllib.request.Request(match[0]) response = urllib.request.urlopen(request) content = response.read().decode('gbk') # &#123;\"code\":200,\"data\":&#123;\"st\":\"1lmuSWeWh1zGQn-t7cfAwvw\"&#125; 这段JS正常的话会包含这一段，我们需要的就是st #print(content) # 正则匹配st pattern = re.compile('&#123;\"st\":\"(.*?)\"&#125;') match = pattern.findall(content) # 利用st进行登录 if match: self.login_by_st(match[0]) else: print(u'无法获取到st，请检查') return # 请求用户中心，查看打印出来的内容，可以看到用户中心的相关信息 response = self.newOpener.open(self.user_url) page = response.read().decode('utf-8') print(page) except urllib.error.HTTPError as e: print(u'请求失败，错误信息：', e.msg)taobao = Taobao()taobao.main()","tags":[{"name":"python","slug":"python","permalink":"https://justfantasy.cn/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://justfantasy.cn/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"python3爬虫学习笔记之cookie的使用","date":"2017-03-14T13:36:00.000Z","path":"2017/03/14/learn-python3-cookie/","text":"Openers和Handlers当你访问URL时，你使用的就是一个opener(这是urllib.reuest.OpenerDirector的一个实例)。一般来说我们使用的是默认的opener—通过urlopen—但是你可以创建自定义的opener。opener会使用handler。所有的“重活”都是由handler完成的。每一个handler知道如何去处理某种类型的URL(http，ftp等等)，或者是如何处理访问URL的某一方面，如HTTP重定向或HTTP cookies。 如果你想要用特定的handler来访问URL，你可以创建一个opener。比如，得到一个处理cookies的opener或者是一个不处理重定向的opener。 直接获取网站cookie12345678910111213141516171819202122232425262728293031#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'from urllib import request, parse, errorfrom http import cookiejarrequest_url = 'http://www.baidu.com'# 此处r是用来防止字符转义的，如果字符串中有'\\t'的话，如果不加r就会被转义user_agent = r'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87'# Keep-Alive功能使客户端到服务器端的连接持续有效headers = &#123;'User-Agent': user_agent, 'Connection': 'keep-alive'&#125;# 创建一个cookie对象，不传递参数说明创建了一个空的cookie对象cookie_obj = cookiejar.CookieJar() # 创建一个cookie处理器，来管理cookie_objhandler = request.HTTPCookieProcessor(cookie_obj) # 初始化一个opener，此opener中所有通信的cookie_obj都会在cookie对象中记录。# 这个cookie是没有域限制的，也就是全局cookieopener = request.build_opener(handler)req = request.Request(request_url, headers=headers)response = opener.open(req)#print(response.read().decode('utf-8'))for obj in cookie_obj: print('Name=' + obj.name) print('Value=' + obj.value) 打印结果： 1234567891011121314Name=BAIDUIDValue=F7B32E8B42B0D2699852D37CA2EEA208:FG=1Name=BIDUPSIDValue=F7B32E8B42B0D2699852D37CA2EEA208Name=H_PS_PSSIDValue=1464_21110_17001_22035_22157Name=PSTMValue=1489496197Name=BDSVRTMValue=0Name=BD_HOMEValue=0Name=BD_LAST_QIDValue=17852155557234882650 将获取到的cookie写入文件1234567891011121314151617181920212223242526272829303132#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'from urllib import request, parse, errorfrom http import cookiejarrequest_url = 'http://www.baidu.com'filename = 'cookie.txt'# 此处r是用来防止字符转义的，如果字符串中有'\\t'的话，如果不加r就会被转义user_agent = r'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87'# Keep-Alive功能使客户端到服务器端的连接持续有效headers = &#123;'User-Agent': user_agent, 'Connection': 'keep-alive'&#125;# 创建一个MozillaCookie对象，用来保存COOKIE，之后写入文件，注意这里需要传递文件名称作为参数cookie_obj = cookiejar.MozillaCookieJar(filename)# 创建一个cookie处理器，来管理cookie_objhandler = request.HTTPCookieProcessor(cookie_obj)# 初始化一个opener，此opener中所有通信的cookie_obj都会在cookie对象中记录。这个cookie是没有域限制的，也就是全局cookieopener = request.build_opener(handler)req = request.Request(request_url, headers=headers)response = opener.open(req)# 保存到cookie文件中# ignore_discard表示cookies将被丢弃也将它保存下来# ignore_expires表示如果在该文件中cookies已经存在，则覆盖原文件写入cookie_obj.save(ignore_discard=True, ignore_expires=True) 执行完毕之后的文件内容： 1234567891011# Netscape HTTP Cookie File# http:&#x2F;&#x2F;curl.haxx.se&#x2F;rfc&#x2F;cookie_spec.html# This is a generated file! Do not edit..baidu.com TRUE &#x2F; FALSE 3636980893 BAIDUID DF850858024C160092C94859576B7EC2:FG&#x3D;1.baidu.com TRUE &#x2F; FALSE 3636980893 BIDUPSID DF850858024C160092C94859576B7EC2.baidu.com TRUE &#x2F; FALSE H_PS_PSSID 1438_21093_18560_17001_22035_22160.baidu.com TRUE &#x2F; FALSE 3636980893 PSTM 1489497072www.baidu.com FALSE &#x2F; FALSE BDSVRTM 0www.baidu.com FALSE &#x2F; FALSE BD_HOME 0www.baidu.com FALSE &#x2F; FALSE 1489497247 BD_LAST_QID 16085727699863129509 从文件中获取Cookie并访问原理就是从文件中获取cookie，传递给cookie处理器 123456789101112131415161718192021222324252627282930#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'from urllib import request, parse, errorfrom http import cookiejar# 此处r是用来防止字符转义的，如果字符串中有'\\t'的话，如果不加r就会被转义user_agent = r'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87'# Keep-Alive功能使客户端到服务器端的连接持续有效headers = &#123;'User-Agent': user_agent, 'Connection': 'keep-alive'&#125;# 请求URLrequest_url = 'http://www.baidu.com'# 记录COOKIE的文件名称filename = 'cookie.txt'# 初始化一个MozillaCookie对象cookie_obj = cookiejar.MozillaCookieJar()# 从文件中读取cookie到对象中cookie_obj.load(filename, ignore_discard=True, ignore_expires=True)# 初始化处理对象，此时的cookie_obj对象是带了文件中保存的COOKIE的handler = request.HTTPCookieProcessor(cookie_obj)opener = request.build_opener(handler)req = request.Request(request_url, headers=headers)response = opener.open(req)print(response.read().decode('utf-8')) ** 下一节学习通过cookie模拟登录 **","tags":[{"name":"python","slug":"python","permalink":"https://justfantasy.cn/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://justfantasy.cn/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"python3爬虫学习笔记之urllib库的使用","date":"2017-03-13T12:21:00.000Z","path":"2017/03/13/learn-python3-urllib/","text":"基本使用12345678910#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'import urllib.requestrequest_url = 'http://www.baidu.com' # 需要请求的URL地址response = urllib.request.urlopen(request_url) # 发起请求print(response.read().decode('utf-8')) # 打印响应的文本，并进行UTF-8解码 urlopen返回对象提供方法： read(), readline(), readlines(), fileno(), close()：对HTTPResponse类型数据进行操作 info()：返回HTTPMessage对象，表示远程服务器返回的头信息 getcode()：返回Http状态码。如果是http请求，200请求成功完成、404网址未找到等等 geturl()：返回请求的url 请求的数据传送GET数据 1234567891011121314151617181920#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'import urllib.requestimport urllib.parseget_data = &#123;'username': 'aaa', 'password': 'bbb'&#125; # 此处将GET的数据定义为一个字典get_data_encode = urllib.parse.urlencode(get_data) # 将GET的数据进行编码request_url = 'https://www.zhihu.com/#signin' # 需要请求的URL地址request_url += '?' + get_data_encode # 追加GET参数到URL后面# https://www.zhihu.com/#signin?username=aaa&amp;password=bbbprint(request_url)# 发起请求response = urllib.request.urlopen(request_url)print(response.read().decode('utf-8')) # 打印响应的文本，并进行UTF-8解码 POST数据 123456789101112131415161718192021#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'import urllib.requestimport urllib.parsepost_data = &#123;'first': 'true', 'pn': 1, 'kd': 'Python'&#125; # 此处将POST的数据定义为一个字典post_data_encode = urllib.parse.urlencode(post_data) # 将POST的数据进行编码# UTF-8编码# 否则会报错：POST data should be bytes or an iterable of bytes. It cannot be of type str.post_data_encode = post_data_encode.encode(encoding='utf-8')request_url = 'http://www.lagou.com/jobs/positionAjax.json?' # 需要请求的URL地址# 发起请求# 此处增加了第二个参数为传送的POST数据（默认为None）# 第三个参数为请求超时时间，默认为socket._GLOBAL_DEFAULT_TIMEOUTresponse = urllib.request.urlopen(request_url, post_data_encode, 3)print(response.read().decode('utf-8')) # 打印响应的文本，并进行UTF-8解码 使用Request &amp;&amp; 设置Headers属性很多网站对非浏览器的访问都做了限制，所以如果我们要完全模拟浏览器去访问网站的话，必须要先设置Headers的属性使用chrome浏览器按F12，点击访问的链接，Headers -&gt; Request Headers User-Agent:Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 如果服务器对页面访问来源做了限制，则需要设置Headers的Referer属性 123456789101112131415161718192021222324#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'import urllib.requestimport urllib.parseuser_agent = 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87'referer = 'http://www.lagou.com/jobs/positionAjax.json?'post_data = &#123;'first': 'true', 'pn': 1, 'kd': 'Python'&#125; # 此处将POST的数据定义为一个字典headers = &#123;'User-Agent': user_agent, 'Referer': referer&#125; # Headers属性初始化post_data_encode = urllib.parse.urlencode(post_data) # 将POST的数据进行编码# UTF-8编码# 否则会报错：POST data should be bytes or an iterable of bytes. It cannot be of type str.post_data_encode = post_data_encode.encode(encoding='utf-8')request_url = 'http://www.lagou.com/zhaopin/Python/?labelWords=label' # 需要请求的URL地址# 使用Request来设置Headersrequest = urllib.request.Request(request_url, post_data_encode, headers)response = urllib.request.urlopen(request)print(response.read().decode('utf-8')) # 打印响应的文本，并进行UTF-8解码 Proxy（代理）的设置如果网站限制了IP访问的次数，则需要更换代理服务器，以免被禁止访问 12345678910111213#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'from urllib import requestrequest_url = 'http://www.lagou.com/jobs/positionAjax.json?'proxy = request.ProxyHandler(&#123;'http': '61.136.115.147:3128'&#125;) # 设置代理服务器opener = request.build_opener(proxy) # 挂载openerrequest.install_opener(opener) # 安装openerresponse = request.urlopen(request_url)print(response.read().decode('utf-8')) # 打印响应的文本，并进行UTF-8解码 异常处理1234567891011121314151617#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'JustFantasy'from urllib import requestfrom urllib import error # 引入错误处理的包request_url = 'http://www.lagou.com/jobs/positionAjax.json?'proxy = request.ProxyHandler(&#123;'http': '116.204.1.111:8081'&#125;) # 设置代理服务器opener = request.build_opener(proxy) # 挂载openerrequest.install_opener(opener) # 安装openertry: response = request.urlopen(request_url)except error.HTTPError as e: print(e.code) # 打印错误码 print(e.msg) # 打印错误信息","tags":[{"name":"python","slug":"python","permalink":"https://justfantasy.cn/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://justfantasy.cn/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"python3爬虫学习笔记之准备阶段","date":"2017-03-13T11:56:00.000Z","path":"2017/03/13/learn-python3-start/","text":"参考教程廖雪峰的官方网站 - python教程崔庆才的个人博客 - Python爬虫学习系列教程 开发环境系统：winows8python版本：python3.5IDE：pycharm 注意事项如果系统中有两个python版本，互相之间如何切换？ 1.windows下自带了一个py.exe的启动器（前提是需要加入环境变量~） 1py -2 demo.py #此处调用的python2 或 1py -3 demo.py #此处调用的python3 2.pip安装包的命令 1pip2 install xxx #给python2安装包 或 1pip3 install xxx #给python3安装包 或 1pip3.5 install xxx #如果存在多个python3版本，则这样调用 3.pycharm切换python版本 file -&gt; setting -&gt; Project: python -&gt; Project Interpreter -&gt; 选择python35即可","tags":[{"name":"python","slug":"python","permalink":"https://justfantasy.cn/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://justfantasy.cn/tags/%E7%88%AC%E8%99%AB/"}]}]